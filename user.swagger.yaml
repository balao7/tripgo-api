swagger: '2.0'
info:
  description: |-
    Data/Users Sync using REST<br><br>
            This API is deployed in http://db.skedgo.com and http://db2.xerox.skedgo.com.<br>
            It is also deployed in http://baryogenesis.skedgo.com/tripgodata-beta for testing purposes.<br>
            You should access to this endpoint using satapp deploys. For example:<br><br>
            http://tripgo.skedgo.com/satapp/api<br><br>
            SatApp will redirect the request to the appropriate database given the Region Eligibility:<br><br>
            'production' will use http://db.skedgo.com<br>
            'xum' 'xum-la'or 'xum-denver' will use http://db2.xerox.skedgo.com<br>
            'beta' will use http://baryogenesis.skedgo.com/tripgodata-beta<br>
  version: 1.0.2014.01.03.refs.heads.production-SNAPSHOT
  title: User Data
basePath: /api
tags:
  - name: AppDataServiceImpl
    description: >-
      This endpoint will allow to get and save the App data of the users. <br>

      It should be filtered by IP when enabled on production, as it currently
      does not have any access restriction
  - name: EventsInfoRestServiceImpl
    description: Endpoint for saving and retrieving EventsInfo
  - name: FavoritesRestServiceImpl
    description: Endpoint for saving and retrieving Favorites
  - name: HabitualsRestServiceImpl
    description: Endpoint for saving and retrieving Habituals
  - name: HistoryRestServiceImpl
    description: Endpoint for saving and retrieving history search items
  - name: LocationKeysRestServiceImpl
    description: Endpoint for saving and retrieving Location Keys
  - name: TripItemRestServiceImpl
    description: Endpoint for saving and retrieving Trip Items
  - name: TripServiceImpl
    description: Endpoint for saving and retrieving trips in JSON format
  - name: UserRestServiceImpl
    description: Endpoint for saving and retrieving user profile data
  - name: VehiclesRestServiceImpl
    description: Endpoint for saving and retrieving Vehicles
definitions:
  json_apitripgouser:
    type: object
    title: APITripGoUser
    allOf:
      - $ref: '#/definitions/json_tripgouser'
      - $ref: '#/definitions/json_publictripgouser'
      - properties:
          aliases:
            description: >-
              Retrieve the list of email aliases<br>

              Cannot be used to update the aliases, for that you need to use the
              account endpoints.
            type: array
            items:
              $ref: '#/definitions/json_jsonemail'
          eventsInfo:
            description: >-
              Retrieve the list of events info<br>

              Cannot be used to update the events info, for that you need to use
              the /eventinfo endpoint.
            type: array
            items:
              $ref: '#/definitions/json_jsoneventinfo'
          favorites:
            description: >-
              Retrieve the list of favorites<br>

              Cannot be used to update the favorites, for that you need to use
              the /favorite endpoint.
            type: array
            items:
              $ref: '#/definitions/json_jsonfavorite'
          habituals:
            description: >-
              Retrieve the list of habituals<br>

              Cannot be used to update the habituals, for that you need to use
              the /habituals endpoint.
            type: array
            items:
              $ref: '#/definitions/json_jsonhabitualitem'
          locationKeys:
            description: >-
              Retrieve the list of location keys<br>

              Cannot be used to update the location keys, for that you need to
              use the /locationkey endpoint.
            type: array
            items:
              $ref: '#/definitions/json_jsonlocationkey'
          pendingValidation:
            description: Retrieve the list of email pending validation
            type: array
            items:
              $ref: '#/definitions/json_jsonemail'
          searchHistory:
            description: >-
              Retrieve the list of history items<br>

              Cannot be used to update the history search terms, for that you
              need to use the /history endpoint.
            type: array
            items:
              $ref: '#/definitions/json_jsonsearchhistory'
          tripItems:
            description: >-
              Retrieve the list of trip items<br>

              Cannot be used to update the trip items, for that you need to use
              the /tripitem endpoint.
            type: array
            items:
              $ref: '#/definitions/json_jsontripitem'
          vehicles:
            description: >-
              Retrieve the list of vehicles<br>

              Cannot be used to update the vehicles, for that you need to use
              the /vehicle endpoint.
            type: array
            items:
              $ref: '#/definitions/json_jsonvehicle'
  json_appdata:
    type: object
    title: AppData
    properties:
      data:
        type: object
      userID:
        type: string
  json_externalauthcredentials:
    type: object
    title: ExternalAuthCredentials
    properties:
      apiKey:
        type: string
      apiSecret:
        type: string
      provider:
        type: string
      scope:
        type: string
  json_jsondistanceunit:
    type: string
    title: JsonDistanceUnit
    enum:
      - metric
      - imperial
      - automatic
  json_jsonemail:
    type: object
    title: JsonEmail
    properties:
      email:
        type: string
      primary:
        type: boolean
      userID:
        type: string
      validated:
        type: boolean
    description: >-
      Represents a user added email, it can be set as primary and validated or
      not
  json_jsoneventinfo:
    type: object
    title: JsonEventInfo
    properties:
      effectiveEnd:
        type: number
      effectiveStart:
        type: number
      excluded:
        type: boolean
      expiryDate:
        type: number
      goHereDirectly:
        type: boolean
      identifier:
        type: string
      userID:
        type: string
    description: Represents information about an event in the agenda
  json_jsonfavorite:
    type: object
    title: JsonFavorite
    properties:
      name:
        type: string
      order:
        description: order to be shown
        type: number
      userID:
        type: string
      uuid:
        description: unique id
        type: string
    description: |-
      Represents favorite data saved for the user, possible values are: <br>
      <a href='./json_jsonfavoritelocation.html'>JsonFavoriteLocation</a> <br>
      <a href='./json_jsonfavoritestop.html'>JsonFavoriteStop</a> <br>
      <a href='./json_jsonfavoritequery.html'>JsonFavoriteQuery</a> <br>
      <a href='./json_jsonfavoritetrip.html'>JsonFavoriteTrip</a> <br>
  json_jsonfavoritelocation:
    type: object
    title: JsonFavoriteLocation
    allOf:
      - $ref: '#/definitions/json_jsonfavorite'
      - properties:
          habitualItemMap:
            type: object
          jsonVehicleMap:
            type: object
          location:
            $ref: '#/definitions/json_jsonlocation'
    description: >-
      Represents a Favorite Location, including a place and a list of vehicles
      garaged at that location.
  json_jsonfavoritequery:
    type: object
    title: JsonFavoriteQuery
    allOf:
      - $ref: '#/definitions/json_jsonfavorite'
      - properties:
          endLocation:
            $ref: '#/definitions/json_jsonlocation'
          queryTime:
            $ref: '#/definitions/json_jsonquerytime'
          startLocation:
            $ref: '#/definitions/json_jsonlocation'
    description: >-
      Represents a favorite query, including the start and end locations and a
      query time.
  json_jsonfavoritestop:
    type: object
    title: JsonFavoriteStop
    allOf:
      - $ref: '#/definitions/json_jsonfavorite'
      - properties:
          filter:
            type: string
          region:
            type: string
          stopCode:
            type: string
    description: Represents a favorite stop
  json_jsonfavoritetrip:
    type: object
    title: JsonFavoriteTrip
    allOf:
      - $ref: '#/definitions/json_jsonfavorite'
      - properties:
          endLocation:
            $ref: '#/definitions/json_jsonlocation'
          pattern:
            description: pattern of the trip
            type: object
          startLocation:
            $ref: '#/definitions/json_jsonlocation'
          time:
            description: in seconds since midnight
            type: number
    description: >-
      Represents a favorite trip, including the start and end locations and the
      time of day and pattern of the trip
  json_jsonhabitualitem:
    type: object
    title: JsonHabitualItem
    properties:
      endDate:
        type: number
      location:
        $ref: '#/definitions/json_jsonfavoritelocation'
      recurrenceRule:
        type: string
      startDate:
        type: number
      timeRaw:
        type: number
      typeRaw:
        type: string
      uuid:
        type: string
  json_jsonlocation:
    type: object
    title: JsonLocation
    properties:
      address:
        type: string
      lat:
        type: number
      lng:
        type: number
      name:
        type: string
  json_jsonlocationkey:
    type: object
    title: JsonLocationKey
    properties:
      key:
        type: string
      location:
        $ref: '#/definitions/json_jsonlocation'
      usageCount:
        type: number
      userID:
        type: string
  json_jsonopting:
    type: object
    title: JsonOpting
    properties:
      googleAnalytics:
        type: boolean
      xeroxAnalytics:
        type: boolean
    description: >-
      Represents opting's booleans for the user, must all be sent together when
      updating it.
  json_jsonphone:
    type: object
    title: JsonPhone
    properties:
      id:
        type: string
      phone:
        type: string
      phoneCode:
        type: string
      type:
        type: string
      validated:
        type: boolean
    description: Represents a phone number with a specific type
  json_jsonprofileweights:
    type: object
    title: JsonProfileWeights
    properties:
      carbon:
        type: number
      hassle:
        type: number
      money:
        type: number
      time:
        type: number
    description: >-
      Represents the user preferences about how to combine the various
      components of a trip's quality into a single figure
  json_jsonquerytime:
    type: object
    title: JsonQueryTime
    properties:
      leaveAfter:
        type: boolean
      time:
        type: number
    description: >-
      Used to represent three different types of query times:<br>

      <ul>

      <li>Leave Now: both time and leaveAfter null</li>

      <li>Leave After: time with the corresponding value and leaveAfter =
      true</li>

      <li>Arrive by: time with the corresponding value and leaveAfter =
      false</li>

      </ul>
  json_jsonresult:
    type: object
    title: JsonResult
    properties:
      result:
        type: object
    description: Generic result class
  json_jsonsearchhistory:
    type: object
    title: JsonSearchHistory
    allOf:
      - $ref: '#/definitions/json_jsonlocation'
      - properties:
          dateAdded:
            type: number
          dateUpdated:
            type: number
          source:
            description: source or destination
            type: boolean
          updates:
            description: number of updates
            type: number
          userID:
            type: string
    description: >-
      Represents a Search History item, including name, address, source and
      lat,lng. <br>

      Will automatically add dateAdded and dateUpdated values, and count the
      number of updates.<br>

      Will keep a max of 30 elements per user and merge items with equal
      (lat,lng) using 5 decimal digits of <a
      href='http://gis.stackexchange.com/questions/8650/how-to-measure-the-accuracy-of-latitude-and-longitude'>precision</a>
  json_jsontripflightitem:
    type: object
    title: JsonTripFlightItem
    allOf:
      - $ref: '#/definitions/json_jsontripitem'
      - properties:
          arrivalAirport:
            type: string
          data:
            type: object
          departureAirpoint:
            type: string
          note:
            type: string
  json_jsontripitem:
    type: object
    title: JsonTripItem
    properties:
      arrivalTime:
        type: number
      departureTime:
        type: number
      flags:
        type: string
      fromIdentifier:
        type: string
      toIdentifier:
        type: string
      userID:
        type: string
      uuid:
        type: string
  json_jsontripkititem:
    type: object
    title: JsonTripKitItem
    allOf:
      - $ref: '#/definitions/json_jsontripitem'
      - properties:
          kitID:
            type: string
          shareURL:
            type: string
  json_jsonvehicle:
    type: object
    title: JsonVehicle
    properties:
      garage:
        $ref: '#/definitions/json_jsonfavoritelocation'
      name:
        type: string
      type:
        type: string
      uuid:
        type: string
    description: 'Vehicle Data, including name, type and garage'
  json_latlong:
    type: object
    title: LatLong
    properties:
      lat:
        type: number
      lng:
        type: number
  json_publictripgouser:
    type: object
    title: PublicTripGoUser
    allOf:
      - $ref: '#/definitions/json_tripgouser'
      - properties:
          phones:
            description: >-
              Retrieve the list of phones<br>

              Cannot be used to update the phones, for that you need to use the
              user endpoints.
            type: array
            items:
              $ref: '#/definitions/json_jsonphone'
  json_route:
    type: object
    title: Route
    properties:
      coordinates:
        type: array
        items:
          $ref: '#/definitions/json_latlong'
      type:
        type: string
  json_savedtripurl:
    type: object
    title: SavedTripUrl
    properties:
      token:
        type: string
      updateUrl:
        type: string
      url:
        type: string
  json_tripgouser:
    type: object
    title: TripGoUser
    properties:
      address1:
        type: string
      address2:
        type: string
      appData:
        type: object
      city:
        type: string
      country:
        type: string
      currency:
        description: >-
          preferred currency of the user. Currencies are identified by their ISO
          4217 currency

          codes. Visit the <a href="https://en.wikipedia.org/wiki/ISO_4217">

          wikipedia ISO web site</a> for more information, including a table of

          currency codes.
        type: string
      cycleSpeed:
        type: number
      distanceUnit:
        $ref: '#/definitions/json_jsondistanceunit'
      email:
        description: >-
          Primary email address, will be just the email if validated, or a JSON
          object with JsonEmail format if not yet validated!

          Cannot be used to update the email, for that you need to use the
          account endpoints.
        $ref: '#/definitions/json_jsonemail'
      firstWeekday:
        type: number
      formatVersion:
        type: number
      givenName:
        type: string
      largeImageURL:
        type: string
      maximumWalkingDuration:
        type: number
      minimumTransferTime:
        type: number
      name:
        type: string
      opting:
        $ref: '#/definitions/json_jsonopting'
      postCode:
        type: string
      profileWeights:
        $ref: '#/definitions/json_jsonprofileweights'
      smallImageURL:
        type: string
      surname:
        type: string
      userID:
        type: string
      valueOfTime:
        type: number
      walkSpeed:
        type: number
    description: >-
      Contains all the information of a user. <br>

      Note that the email address will be returned as a String not as a
      JsonEmail if it is already validated.<br>

      Also, the list of aliases, favorites, vehicles, etc. are only returned by
      the backend, cannot be used to updated

      those lists, for that, you need to use the endpoints for that purpose.
paths:
  /appdata/full:
    get:
      tags:
        - AppDataServiceImpl
      operationId: resource_AppDataServiceImpl_getFullData_GET
      produces:
        - application/json
      parameters:
        - name: ids
          in: query
          type: string
      responses:
        '200':
          schema:
            $ref: '#/definitions/json_jsonresult'
          headers: {}
          description: Success
        default:
          description: Unexpected error.
  /appdata/me:
    get:
      tags:
        - AppDataServiceImpl
      description: 'Given a specific user, will return the app data'
      operationId: resource_AppDataServiceImpl_getData_GET
      produces:
        - application/json
      parameters:
        - name: userToken
          in: header
          type: string
      responses:
        '200':
          schema:
            type: object
          headers: {}
          description: Success
        default:
          description: Unexpected error.
    post:
      tags:
        - AppDataServiceImpl
      description: Will save the appdata of a specific user
      operationId: resource_AppDataServiceImpl_saveData_POST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userToken
          in: header
          type: string
        - name: body
          in: body
          schema:
            type: object
          description: appdata
      responses:
        '201':
          schema:
            type: object
          headers: {}
          description: Success
        default:
          description: Unexpected error.
#  '/appdata/latestuserIDs/{timestamp}':
#    get:
#      tags:
#        - AppDataServiceImpl
#      description: |-
#        Return just the list of userIDs
#
#        Filtered by IP address
#      operationId: resource_AppDataServiceImpl_getLatestUserIDs_GET
#      produces:
#        - application/json
#      parameters:
#        - name: timestamp
#          in: path
#          required: true
#          type: string
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsonresult'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /appdata:
#    get:
#      tags:
#        - AppDataServiceImpl
#      description: |-
#        Get all the user data of the users<br>
#        In case of missing data, you still get the userID and no data field<br>
#
#
#        Filtered by IP address
#      operationId: resource_AppDataServiceImpl_getAllData_GET
#      produces:
#        - application/json
#      parameters:
#        - name: ids
#          in: query
#          type: string
#          description: >-
#            list of ids of the user data to be returned (if none will return
#            all)
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsonresult'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    post:
#      tags:
#        - AppDataServiceImpl
#      description: >-
#        Will save all the given appdata to the specific userIDs (same format as
#        GET)
#
#        Will fail if at least one of the userIDs is invalid.
#
#        Filtered by IP address
#      operationId: resource_AppDataServiceImpl_saveData_POST2
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: body
#          in: body
#          schema:
#            type: array
#            items:
#              $ref: '#/definitions/json_appdata'
#          description: to be saved
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsonresult'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /appdata/userIDs:
#    get:
#      tags:
#        - AppDataServiceImpl
#      description: |-
#        Return just the list of userIDs
#
#        Filtered by IP address
#      operationId: resource_AppDataServiceImpl_getAllUserIDs_GET
#      produces:
#        - application/json
#      parameters: []
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsonresult'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  '/eventinfo/{id}':
#    get:
#      tags:
#        - EventsInfoRestServiceImpl
#      description: Get a specific event info
#      operationId: resource_EventsInfoRestServiceImpl_getEventInfo_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the event info
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsoneventinfo'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    put:
#      tags:
#        - EventsInfoRestServiceImpl
#      description: Updates an existing Event Info
#      operationId: resource_EventsInfoRestServiceImpl_updateEventInfo_PUT
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the event info
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsoneventinfo'
#          description: 'the new event info data, can be partial'
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsoneventinfo'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    delete:
#      tags:
#        - EventsInfoRestServiceImpl
#      description: Deletes an exising Event Info
#      operationId: resource_EventsInfoRestServiceImpl_deleteEventInfo_DELETE
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the event info to delete
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsoneventinfo'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /eventinfo/array:
#    get:
#      tags:
#        - EventsInfoRestServiceImpl
#      description: Get all the events info of the user
#      operationId: resource_EventsInfoRestServiceImpl_getEventsInfoArray_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            type: array
#            items:
#              $ref: '#/definitions/json_jsoneventinfo'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /eventinfo:
#    get:
#      tags:
#        - EventsInfoRestServiceImpl
#      description: Get all the events info of the user
#      operationId: resource_EventsInfoRestServiceImpl_getEventsInfo_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsonresult'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    post:
#      tags:
#        - EventsInfoRestServiceImpl
#      description: Creates a new Event Info
#      operationId: resource_EventsInfoRestServiceImpl_addEventInfo_POST
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsoneventinfo'
#          description: the event info to create
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsoneventinfo'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  '/favorite/{id}':
#    get:
#      tags:
#        - FavoritesRestServiceImpl
#      description: Get a specific favorite
#      operationId: resource_FavoritesRestServiceImpl_getFavorite_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the favorite
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsonfavorite'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    put:
#      tags:
#        - FavoritesRestServiceImpl
#      description: Updates an existing Favorite
#      operationId: resource_FavoritesRestServiceImpl_updateFavorite_PUT
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the favorite
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsonfavorite'
#          description: 'the new favorite data, can be partial'
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsonfavorite'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    delete:
#      tags:
#        - FavoritesRestServiceImpl
#      description: Deletes an existing Favorite
#      operationId: resource_FavoritesRestServiceImpl_deleteFavorite_DELETE
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the favorite to delete
#      responses:
#        '201':
#          schema:
#            type: object
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /favorite:
#    get:
#      tags:
#        - FavoritesRestServiceImpl
#      description: Get all the favorites of the user
#      operationId: resource_FavoritesRestServiceImpl_getFavorites_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsonresult'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    post:
#      tags:
#        - FavoritesRestServiceImpl
#      description: Creates a new Favorite
#      operationId: resource_FavoritesRestServiceImpl_addFavorite_POST
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsonfavorite'
#          description: the favorite to create
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsonfavorite'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /favorite/array:
#    get:
#      tags:
#        - FavoritesRestServiceImpl
#      description: Get all the favorites of the user
#      operationId: resource_FavoritesRestServiceImpl_getFavoritesArray_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            type: array
#            items:
#              $ref: '#/definitions/json_jsonfavorite'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  '/habitual/{id}':
#    get:
#      tags:
#        - HabitualsRestServiceImpl
#      description: Get a specific habitual
#      operationId: resource_HabitualsRestServiceImpl_getHabitual_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the habitual
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsonhabitualitem'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    put:
#      tags:
#        - HabitualsRestServiceImpl
#      description: Updates an existing Habitual
#      operationId: resource_HabitualsRestServiceImpl_updateHabitual_PUT
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the habitual
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsonhabitualitem'
#          description: 'the new habitual data, can be partial'
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsonhabitualitem'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    delete:
#      tags:
#        - HabitualsRestServiceImpl
#      description: Deletes an exising Habitual
#      operationId: resource_HabitualsRestServiceImpl_deleteHabitual_DELETE
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the habitual to delete
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsonhabitualitem'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /habitual:
#    get:
#      tags:
#        - HabitualsRestServiceImpl
#      description: Get all the habituals of the user
#      operationId: resource_HabitualsRestServiceImpl_getHabituals_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsonresult'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    post:
#      tags:
#        - HabitualsRestServiceImpl
#      description: Creates a new Habitual
#      operationId: resource_HabitualsRestServiceImpl_addHabitual_POST
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsonhabitualitem'
#          description: the habitual to create
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsonhabitualitem'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /habitual/array:
#    get:
#      tags:
#        - HabitualsRestServiceImpl
#      description: Get all the habituals of the user
#      operationId: resource_HabitualsRestServiceImpl_getHabitualsArray_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            type: array
#            items:
#              $ref: '#/definitions/json_jsonhabitualitem'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /history:
#    get:
#      tags:
#        - HistoryRestServiceImpl
#      description: Get the history list of the user
#      operationId: resource_HistoryRestServiceImpl_getHistory_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsonresult'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    post:
#      tags:
#        - HistoryRestServiceImpl
#      description: Creates a new history
#      operationId: resource_HistoryRestServiceImpl_addHistory_POST
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsonsearchhistory'
#          description: the history to create
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsonsearchhistory'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /history/array:
#    get:
#      tags:
#        - HistoryRestServiceImpl
#      description: Get the history list of the user
#      operationId: resource_HistoryRestServiceImpl_getHistoryArray_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            type: array
#            items:
#              $ref: '#/definitions/json_jsonsearchhistory'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    post:
#      tags:
#        - HistoryRestServiceImpl
#      description: Add new history items
#      operationId: resource_HistoryRestServiceImpl_addMultipleHistory_POST
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: body
#          in: body
#          schema:
#            type: array
#            items:
#              $ref: '#/definitions/json_jsonsearchhistory'
#          description: the history items to create
#      responses:
#        '201':
#          schema:
#            type: array
#            items:
#              $ref: '#/definitions/json_jsonsearchhistory'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /locationkey/array:
#    get:
#      tags:
#        - LocationKeysRestServiceImpl
#      description: Get all the location keys of the user
#      operationId: resource_LocationKeysRestServiceImpl_getLocationKeysArray_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            type: array
#            items:
#              $ref: '#/definitions/json_jsonlocationkey'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  '/locationkey/{id}':
#    get:
#      tags:
#        - LocationKeysRestServiceImpl
#      description: Get a specific location key
#      operationId: resource_LocationKeysRestServiceImpl_getLocationKey_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the location key
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsonlocationkey'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    put:
#      tags:
#        - LocationKeysRestServiceImpl
#      description: Updates an existing Location Key
#      operationId: resource_LocationKeysRestServiceImpl_updateLocationKey_PUT
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the location key
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsonlocationkey'
#          description: 'the new location key data, can be partial'
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsonlocationkey'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    delete:
#      tags:
#        - LocationKeysRestServiceImpl
#      description: Deletes an exising Location Key
#      operationId: resource_LocationKeysRestServiceImpl_deleteLocationKey_DELETE
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the location key to delete
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsonlocationkey'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /locationkey:
#    get:
#      tags:
#        - LocationKeysRestServiceImpl
#      description: Get all the location keys of the user
#      operationId: resource_LocationKeysRestServiceImpl_getLocationKeys_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsonresult'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    post:
#      tags:
#        - LocationKeysRestServiceImpl
#      description: Creates a new Location Key
#      operationId: resource_LocationKeysRestServiceImpl_addLocationKey_POST
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsonlocationkey'
#          description: the location key to create
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsonlocationkey'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /tripitem:
#    get:
#      tags:
#        - TripItemRestServiceImpl
#      description: Get all the trip items of the user
#      operationId: resource_TripItemRestServiceImpl_getHabituals_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsonresult'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    post:
#      tags:
#        - TripItemRestServiceImpl
#      description: Creates a new Trip Item
#      operationId: resource_TripItemRestServiceImpl_addTripItem_POST
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsontripitem'
#          description: the trip item to create
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsontripitem'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  '/tripitem/{id}':
#    get:
#      tags:
#        - TripItemRestServiceImpl
#      description: Get a specific trip item
#      operationId: resource_TripItemRestServiceImpl_getTripItem_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the trip item
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsontripitem'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    put:
#      tags:
#        - TripItemRestServiceImpl
#      description: Updates an existing Trip Item
#      operationId: resource_TripItemRestServiceImpl_updateTripItem_PUT
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the trip item
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsontripitem'
#          description: 'the new trip item data, can be partial'
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsontripitem'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    delete:
#      tags:
#        - TripItemRestServiceImpl
#      description: Deletes an exising Trip Item
#      operationId: resource_TripItemRestServiceImpl_deleteTripItem_DELETE
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the trip item to delete
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsontripitem'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /tripitem/array:
#    get:
#      tags:
#        - TripItemRestServiceImpl
#      description: Get all the trip items of the user
#      operationId: resource_TripItemRestServiceImpl_getHabitualsArray_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            type: array
#            items:
#              $ref: '#/definitions/json_jsontripitem'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /trip:
#    post:
#      tags:
#        - TripServiceImpl
#      description: Save a trip in the database
#      operationId: resource_TripServiceImpl_saveTrip_POST
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: async
#          in: query
#          default: 'true'
#          type: string
#        - name: long
#          in: query
#          type: string
#          description: >-
#            true if a long token is required (UUID), otherwise, a random 6
#            string is used
#        - name: update
#          in: query
#          type: string
#          description: true if the update url should be updated
#        - name: body
#          in: body
#          schema:
#            type: object
#          description: the trip
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_savedtripurl'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    get:
#      tags:
#        - TripServiceImpl
#      operationId: resource_TripServiceImpl_getSavedTrips_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#          description: the user token identifying the user
#      responses:
#        '200':
#          schema:
#            type: array
#            items:
#              type: string
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  '/trip/{id}':
#    get:
#      tags:
#        - TripServiceImpl
#      description: Retrieve a saved trip
#      operationId: resource_TripServiceImpl_getTrip_GET
#      produces:
#        - application/json
#      parameters:
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: token of the saved trip
#        - name: enhance
#          in: query
#          default: 'true'
#          type: string
#          description: true if the trip needs to be enhanced (on external servers)
#      responses:
#        '200':
#          schema:
#            type: object
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  '/user/image/large/{userID}':
#    get:
#      tags:
#        - UserRestServiceImpl
#      description: >-
#        returns the large image of the user profile, the url for this endpoint
#        should be obtained from the JsonUser object,
#
#        see largeImageUrl
#
#
#        Not needed anymore for DynamoDB
#      operationId: resource_UserRestServiceImpl_getLargeImage_GET
#      produces:
#        - image/jpeg
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: userID
#          in: path
#          required: true
#          type: string
#      responses:
#        '200':
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  '/user/image/small/{userID}':
#    get:
#      tags:
#        - UserRestServiceImpl
#      description: >-
#        returns the small image of the user profile, the url for this endpoint
#        should be obtained from the JsonUser object,
#
#        see smallImageUrl
#
#
#        Not needed anymore for DynamoDB
#      operationId: resource_UserRestServiceImpl_getSmallImage_GET
#      produces:
#        - image/jpeg
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: userID
#          in: path
#          required: true
#          type: string
#      responses:
#        '200':
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  '/user/phone/validate/{userID}/{phoneID}':
#    post:
#      tags:
#        - UserRestServiceImpl
#      description: |-
#        validate a phone number
#
#        Filtered by IP address
#      operationId: resource_UserRestServiceImpl_validatePhone_POST
#      produces:
#        - application/json
#      parameters:
#        - name: phoneID
#          in: path
#          required: true
#          type: string
#        - name: userID
#          in: path
#          required: true
#          type: string
#      responses:
#        '201':
#          schema:
#            type: object
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /user/image:
#    post:
#      tags:
#        - UserRestServiceImpl
#      description: Updates the user profile data by adding an image profile
#      operationId: resource_UserRestServiceImpl_setImage_POST
#      consumes:
#        - multipart/form-data
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: body
#          in: body
#          schema:
#            type: object
#          description: image file in
#      responses:
#        '201':
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    delete:
#      tags:
#        - UserRestServiceImpl
#      description: removes the image of the user profile
#      operationId: resource_UserRestServiceImpl_deleteImage_DELETE
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '201':
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /user/phone:
#    post:
#      tags:
#        - UserRestServiceImpl
#      description: Adds a new Phone
#      operationId: resource_UserRestServiceImpl_addPhone_POST
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsonphone'
#          description: the phone to add
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_apitripgouser'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  '/user/phone/{id}':
#    put:
#      tags:
#        - UserRestServiceImpl
#      description: Updates an existing Phone
#      operationId: resource_UserRestServiceImpl_updatePhone_PUT
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the phone
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsonphone'
#          description: the phone to update
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_apitripgouser'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    delete:
#      tags:
#        - UserRestServiceImpl
#      description: Deletes an existing Phone
#      operationId: resource_UserRestServiceImpl_deletePhone_DELETE
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the phone to delete
#      responses:
#        '201':
#          schema:
#            type: object
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /user:
#    get:
#      tags:
#        - UserRestServiceImpl
#      operationId: resource_UserRestServiceImpl_getUserData_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_apitripgouser'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    put:
#      tags:
#        - UserRestServiceImpl
#      description: Updates the user profile data
#      operationId: resource_UserRestServiceImpl_updateUser_PUT
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_tripgouser'
#          description: 'new user data, can be partial'
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_apitripgouser'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    delete:
#      tags:
#        - UserRestServiceImpl
#      description: Deletes the User Account
#      operationId: resource_UserRestServiceImpl_deleteUser_DELETE
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '201':
#          schema:
#            type: object
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  '/vehicle/{id}':
#    get:
#      tags:
#        - VehiclesRestServiceImpl
#      description: Get a specific vehicle
#      operationId: resource_VehiclesRestServiceImpl_getVehicle_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the vehicle
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsonvehicle'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    put:
#      tags:
#        - VehiclesRestServiceImpl
#      description: Updates an existing Vehicle
#      operationId: resource_VehiclesRestServiceImpl_updateVehicle_PUT
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the vehicle
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsonvehicle'
#          description: 'the new vehicle data, can be partial'
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsonvehicle'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    delete:
#      tags:
#        - VehiclesRestServiceImpl
#      description: Deletes an existing Vehicle
#      operationId: resource_VehiclesRestServiceImpl_deleteVehicle_DELETE
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: id
#          in: path
#          required: true
#          type: string
#          description: id of the vehicle to delete
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsonvehicle'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /vehicle/array:
#    get:
#      tags:
#        - VehiclesRestServiceImpl
#      description: Get all the vehicles of the user
#      operationId: resource_VehiclesRestServiceImpl_getHabitualsArray_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            type: array
#            items:
#              $ref: '#/definitions/json_jsonvehicle'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#  /vehicle:
#    get:
#      tags:
#        - VehiclesRestServiceImpl
#      description: Get all the vehicles of the user
#      operationId: resource_VehiclesRestServiceImpl_getHabituals_GET
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#      responses:
#        '200':
#          schema:
#            $ref: '#/definitions/json_jsonresult'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
#    post:
#      tags:
#        - VehiclesRestServiceImpl
#      description: Creates a new Vehicle
#      operationId: resource_VehiclesRestServiceImpl_addVehicle_POST
#      consumes:
#        - application/json
#      produces:
#        - application/json
#      parameters:
#        - name: userToken
#          in: header
#          type: string
#        - name: body
#          in: body
#          schema:
#            $ref: '#/definitions/json_jsonvehicle'
#          description: the vehicle to create
#      responses:
#        '201':
#          schema:
#            $ref: '#/definitions/json_jsonvehicle'
#          headers: {}
#          description: Success
#        default:
#          description: Unexpected error.
