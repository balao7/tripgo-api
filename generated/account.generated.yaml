---
swagger: "2.0"
info:
  description: "You should access to this endpoint using satapp deploys. For example:<br><br>https://tripgo.skedgo.com/satapp/account<br><br>"
  version: "1.0"
  title: "Account Management"
  contact:
    name: "TripGo API"
    email: "api@tripgo.com"
basePath: "/tripgodata-debug/account"
tags:
- name: "Basic Auth"
  description: "Provides login, signup, reset password, change password and logout"
- name: "Aliases"
  description: "Provides email aliases handling"
- name: "External Auth"
  description: "Provides facebook auth services, google auth services and twitter\
    \ auth services"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /alias/{email}:
    get:
      tags:
      - "Aliases"
      summary: "Gets a specific email alias"
      description: ""
      operationId: "getAlias"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JsonAlias"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: "Authentication Failed"
          schema:
            $ref: "#/definitions/ErrorMessage"
    post:
      tags:
      - "Aliases"
      summary: "Add email alias"
      description: "by sending an email with a url to validate the alias email"
      operationId: "addAlias"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: "Authentication Failed"
          schema:
            $ref: "#/definitions/ErrorMessage"
    delete:
      tags:
      - "Aliases"
      summary: "Deletes email alias"
      description: ""
      operationId: "deleteAlias"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: "Authentication Failed"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /alias/validate/{token}:
    post:
      tags:
      - "Aliases"
      summary: "Validate alias"
      description: "checks the validity of an alias token"
      operationId: "validateAlias"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /alias/primary/{email}:
    post:
      tags:
      - "Aliases"
      summary: "Set alias email primary"
      description: "If it is already validated"
      operationId: "setPrimaryEmail"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: "Authentication Failed"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /alias:
    get:
      tags:
      - "Aliases"
      summary: "Get email aliases"
      description: ""
      operationId: "getAliases"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JsonAliases"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
        401:
          description: "Authentication Failed"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /credentials/{provider}:
    get:
      tags:
      - "External Auth"
      summary: "Get Credentials"
      description: ""
      operationId: "getCredentials"
      produces:
      - "application/json"
      parameters:
      - name: "provider"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ExternalAuthCredentials"
  /twitter/{token}/{secret}:
    post:
      tags:
      - "External Auth"
      summary: "Twitter auth"
      description: "on client twitter oauth, the apps need to hit this endpoint to\
        \ get a valid userToken and register/login the user"
      operationId: "twitter"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "path"
        required: true
        type: "string"
      - name: "secret"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /apple/{token}:
    post:
      tags:
      - "External Auth"
      summary: "Apple silent login"
      description: "on iOS clients, the apps may hit this endpoint to get a valid\
        \ userToken and register/login the user"
      operationId: "apple"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /facebook/{token}:
    post:
      tags:
      - "External Auth"
      summary: "Facebook auth"
      description: "on client facebook oauth, the apps need to hit this endpoint to\
        \ get a valid userToken and register/login the user"
      operationId: "facebook"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /google/{token}:
    post:
      tags:
      - "External Auth"
      summary: "Google auth"
      description: "on client google oauth, the apps need to hit this endpoint to\
        \ get a valid userToken and register/login the user"
      operationId: "google"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /twitter_callback/{oauthToken}/{verifier}:
    post:
      tags:
      - "External Auth"
      summary: "Twitter callback"
      description: "on client twitter oauth, the apps need to hit this endpoint to\
        \ get a valid userToken and register/login the user"
      operationId: "twitter_callback"
      produces:
      - "application/json"
      parameters:
      - name: "oauthToken"
        in: "path"
        required: true
        type: "string"
      - name: "verifier"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JsonToken"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /android/{token}:
    post:
      tags:
      - "External Auth"
      summary: "Android silent login"
      description: "on Android clients, the apps may hit this endpoint to get a valid\
        \ userToken and register/login the user"
      operationId: "android"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /esignup:
    post:
      tags:
      - "Basic Auth"
      summary: "Extended signup"
      description: "Extended version"
      operationId: "extendedSignUp"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JsonExtendedSignupUser"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /reset/{email}:
    post:
      tags:
      - "Basic Auth"
      summary: "Reset password"
      description: "by sending an email with a url to reset the account password"
      operationId: "reset"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        description: "email of the user account to reset password"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /signup:
    post:
      tags:
      - "Basic Auth"
      summary: "Signup"
      description: "the account will be inactive until it is activated with the emailed\
        \ link."
      operationId: "signup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JsonSignupUser"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /login:
    post:
      tags:
      - "Basic Auth"
      summary: "Log in"
      description: ""
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JsonUser"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        401:
          description: "Authentication Failed"
          schema:
            $ref: "#/definitions/ErrorMessage"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /logout:
    post:
      tags:
      - "Basic Auth"
      summary: "Log out"
      description: ""
      operationId: "logout"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        401:
          description: "Authentication Failed"
          schema:
            $ref: "#/definitions/ErrorMessage"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /password/validate:
    post:
      tags:
      - "Basic Auth"
      summary: "Validate password"
      description: ""
      operationId: "validatePassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JsonUser"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /validate/signup/{token}:
    post:
      tags:
      - "Basic Auth"
      summary: "Validate Sign Up"
      description: "checks the validity of an sigunp token"
      operationId: "validateSignup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "path"
        description: "a valid signup token"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /validate/reset/{token}:
    post:
      tags:
      - "Basic Auth"
      summary: "Validate Reset"
      description: "checks the validity of a reset token"
      operationId: "validateReset"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "path"
        description: "a valid reset token"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /password/{token}:
    post:
      tags:
      - "Basic Auth"
      summary: "Change password (by token)"
      description: "given a valid reset token, the new given password will be set"
      operationId: "setPassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "path"
        description: "a valid reset token"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JsonUser"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /password/change:
    post:
      tags:
      - "Basic Auth"
      summary: "Change password"
      description: "given a valid password, the new given password will be set"
      operationId: "changePassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JsonNewPassword"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResult"
        400:
          description: "Missing or invalid parameters"
          schema:
            $ref: "#/definitions/ErrorMessage"
securityDefinitions:
  userToken:
    description: ""
    type: "apiKey"
    name: "userToken"
    in: "header"
definitions:
  JsonAlias:
    type: "object"
    properties:
      email:
        type: "string"
        example: "email@address.com"
      validated:
        type: "boolean"
      primary:
        type: "boolean"
  ErrorMessage:
    type: "object"
    properties:
      error:
        type: "string"
      errorCode:
        type: "integer"
        format: "int32"
      usererror:
        type: "boolean"
  ApiResult:
    type: "object"
    properties:
      changed:
        type: "boolean"
      userToken:
        type: "string"
      userID:
        type: "string"
      newUser:
        type: "boolean"
  JsonAliases:
    type: "object"
    properties:
      aliases:
        type: "array"
        description: "List of email aliases"
        items:
          $ref: "#/definitions/JsonAlias"
  ExternalAuthCredentials:
    type: "object"
    properties:
      apiKey:
        type: "string"
      apiSecret:
        type: "string"
      provider:
        type: "string"
        enum:
        - "FACEBOOK_SKEDGO"
        - "FACEBOOK_TRIPGO"
        - "TWITTER_TRIPGO"
        - "FACEBOOK_RIOGO"
        - "FACEBOOK_XUM"
        - "FACEBOOK_XUM_DENVER"
        - "FACEBOOK_XUM_LA"
        - "FACEBOOK_XUM_BLR"
        - "GOOGLE_TRIPGO"
        - "GOOGLE_XUM"
        - "GOOGLE_XUM_DENVER"
        - "GOOGLE_XUM_LA"
        - "APPLE_TRIPGO"
        - "ANDROID_TRIPGO"
      scope:
        type: "string"
  JsonToken:
    type: "object"
    properties:
      token:
        type: "string"
      secret:
        type: "string"
  JsonExtendedSignupUser:
    type: "object"
    properties:
      username:
        type: "string"
        example: "email@address.com"
        description: "The username must be a valid email address"
      password:
        type: "string"
        example: "**passwd**"
      name:
        type: "string"
        example: "John Doe"
      location:
        $ref: "#/definitions/JsonLocation"
      givenName:
        type: "string"
        example: "John"
      surname:
        type: "string"
        example: "Doe"
      appData:
        type: "object"
        additionalProperties:
          type: "object"
      phone:
        $ref: "#/definitions/JsonPhone"
  JsonLocation:
    type: "object"
    properties:
      lat:
        type: "number"
        format: "double"
        example: -33.858867
      lng:
        type: "number"
        format: "double"
        example: 151.2036155
      address:
        type: "string"
        example: "55 Harrington street"
      name:
        type: "string"
        example: "Office"
  JsonPhone:
    type: "object"
    properties:
      phoneCode:
        type: "string"
        example: "750"
      phone:
        type: "string"
        example: "43216789"
      validated:
        type: "boolean"
      type:
        type: "string"
        example: "mobile"
      id:
        type: "string"
  JsonSignupUser:
    type: "object"
    properties:
      username:
        type: "string"
        example: "email@address.com"
        description: "The username must be a valid email address"
      password:
        type: "string"
        example: "**passwd**"
      name:
        type: "string"
        example: "John Doe"
      location:
        $ref: "#/definitions/JsonLocation"
  JsonUser:
    type: "object"
    properties:
      username:
        type: "string"
        example: "email@address.com"
        description: "The username must be a valid email address"
      password:
        type: "string"
        example: "**passwd**"
  JsonNewPassword:
    type: "object"
    properties:
      username:
        type: "string"
        example: "email@address.com"
        description: "The username must be a valid email address"
      password:
        type: "string"
        example: "**passwd**"
      newPassword:
        type: "string"
        example: "**newpasswd**"
