swagger: "2.0"
info:
  version: 1.11.0
  title: TripGo
  description:
    The TripGo API allows you to plan door-to-door trips using
    a large variety of public and private transport. It integrates real-time
    information and, for selected providers, allows users to book and pay
    for transport.<br/>
    <br/>
    This API is powered by multiple servers, not all of which
    cover every region. **You have to use the correct host names for the
    region that you query**. You get those host names by first querying
    `regions.json` and looking up the `urls` for that region. You should only
    cache this information short term as those URLs can change without
    notice.<br/>
    <br/>
    This API is optimised to return a large number of trip results while
    maintaining a small package sizes. This has a number of complications.
    Notably, to get a trip's segments you need to combine the segment
    references with the segment templates.

  termsOfService: http://skedgo.com/api/terms
  contact:
    name: SkedGo API Team
    email: api@skedgo.com
    url: http://skedgo.com/tripgo-api/
  license:
    name: Proprietary
    url: http://skedgo.com/tripgo-api/license
host: tripgo.skedgo.com
basePath: /satapp
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  api_key:
    name: X-TripGo-Key
    type: apiKey
    in: header
security:
  - api_key: []
tags:
  - name: Configuration
  - name: Routing
  - name: Trips
  - name: TTP
  - name: Quick Booking
  - name: Form-Based Booking
  - name: Auth
  - name: Geocode
  - name: Locations
  - name: Stops
  - name: Services
  - name: Alerts
  - name: User
    description: Endpoint for saving and retrieving user profile data
  - name: Trip
    description: Endpoint for saving and retrieving trips in JSON format
  - name: Vehicles
    description: Endpoint for saving and retrieving Vehicles
  - name: Favorites
    description: Endpoint for saving and retrieving Favorites
  - name: AppData
    description: >-
      This endpoint will allow to get and save the App data of the users. <br>

      It should be filtered by IP when enabled on production, as it currently
      does not have any access restriction
  - name: EventsInfo
    description: Endpoint for saving and retrieving EventsInfo
  - name: Habituals
    description: Endpoint for saving and retrieving Habituals
  - name: History
    description: Endpoint for saving and retrieving history search items
  - name: LocationKeys
    description: Endpoint for saving and retrieving Location Keys
  - name: TripItem
    description: Endpoint for saving and retrieving Trip Items
  - name: Basic Auth
    description: |-
      Provides login, signup, reset password, change password and logout
  - name: Aliases
    description: |-
      Provides email aliases handling
  - name: External Auth
    description: >-
      Provides facebook auth services, google auth services and twitter auth
      services

x-tagGroups:
  - name: Configuration API
    tags:
      - Configuration
  - name: Routing API
    tags:
      - Routing
      - TTP
      - Trips
  - name: Transit API
    tags:
      - Geocode
      - Locations
      - Stops
      - Services
      - Alerts
  - name: Booking API
    tags:
      - Quick Booking
      - Form-Based Booking
      - Booking Beta
      - Auth
  - name: Account API
    tags:
      - Basic Auth
      - Aliases
      - External Auth
  - name: User API
    tags:
      - User
      - Trip
      - Vehicles
      - Favorites
      - AppData
      - EventsInfo
      - Habituals
      - History
      - LocationKeys
      - TripItem

paths:
  /regions.json:
    post:
      tags:
        - Configuration
      summary: Available regions with host names per region.
      description:
        Lists available regions, their server host names and available
        transport modes. Provide optional hash code to only return output
        if the data has changed.
      parameters:
        - name: input
          in: body
          schema:
            $ref: '#/definitions/RegionsInput'
      responses:
        200:
          description: Available regions and modes
          schema:
            $ref: '#/definitions/RegionsResponse'

  /regionInfo.json:
    post:
      tags:
        - Configuration
      summary: TSPs per region
      description:
        Retrieves detailed information about covered transport service providers for the specified regions.
      parameters:
        - name: input
          in: body
          schema:
            $ref: '#/definitions/RegionInfoInput'
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/RegionInfoResponse'

  /routing.json:
    get:
      tags:
        - Routing
      summary: A-to-B trips
      description:
        Calculates door-to-door trips for the specified mode(s).
      parameters:
        - name: v
          in: query
          type: integer
          description: Requested version number of output. Needs to be 11.
          minimum: 11
          maximum: 11
          multipleOf: 1
          required: true
        - name: from
          in: query
          type: string
          description: Origin coordinate as `(lat,lng)` string.
          required: true
        - name: to
          in: query
          type: string
          description: Destination coordinate as `(lat,lng)` string.
          required: true
        - name: departAfter
          in: query
          description: Departure time in seconds since 1970. Either this or `arriveBefore` need to be specified. You can also specify both to find trips that minimise duration within that window.
          type: integer
        - name: arriveBefore
          in: query
          description: Arrival time in seconds since 1970. Either this or `departAfter` need to be specified. You can also specify both to find trips that minimise duration within that window.
          type: integer
        - name: modes
          type: array
          in: query
          items:
            type: string
          description:
            Modes for which results should be returned. [Mode identifier](http://skedgo.github.io/tripgo-api/site/advanced/#mode-identifiers) strings like `pt_pub` or `pt_tax_FLITWAYS` exactly as returned by `regions.json`. If multiple modes are specified only trips which mix at least two of these modes are returned. [Details of single-modal and multi-modal queries are on our developer site](http://skedgo.github.io/tripgo-api/site/advanced/#single-modal-vs-multi-modal-routing).
          required: true
        - name: avoid
          type: array
          in: query
          items:
            type: string
          description:
            Public transport modes to avoid. Identifier strings like `pt_pub_bus` exactly as returend by `regionInfo.json`. If multiple modes are specified, all will be avoided. Results can still use these modes if no other public transport mode is suitable.
        - name: tt
          type: integer
          in: query
          description: Preferred transfer time in minutes.
          default: 3
          minimum: 0
          multipleOf: 1
        - name: ws
          type: integer
          in: query
          description: Walking speed. 0 slow, 1 medium, 2 fast.
          default: 1
          minimum: 0
          maximum: 2
          multipleOf: 1
        - name: cs
          type: integer
          in: query
          description: Cycling speed. 0 slow, 1 medium, 2 fast.
          default: 1
          minimum: 0
          maximum: 2
          multipleOf: 1
        - name: wp
          type: string
          in: query
          description:
            String with `(%f,%f,%f,%f)` format specifying the user's weighting profile. In order, the weights represent price, environmental impact, duration, and convenience. Each value should be between 0.1 and 2.0. 0.1 means the related cost is unimportant and 2.0 means it's very important to the user. This impacts both the routing results and each trip's `weightedScore` value.
          default: (1, 1, 1, 1)
        - name: ir
          type: boolean
          in: query
          description: Boolean if interregional results, i.e., between regions as defined as in `regions.json`, should be returned.
          default: false
        - name: conc
          description: If concession pricing should be use for public transport
          type: boolean
          in: query
          default: false
        - name: wheelchair
          description: Boolean if routing results should include wheelchair information (note, that this will change 'walking' instruction to 'rolling' instruction).
          type: boolean
          in: query
          default: false

      responses:
        200:
          description: Successful response. Can include many trips.
          schema:
            $ref: '#/definitions/RoutingResponse'

  /waypoint.json:
    post:
      tags:
        - Routing
      summary: A-to-B-to-C trip
      description: |
        Calculates a single A-to-B-to-C trip where transport modes can be customised per segment.

        Note: If you require alternatives for travelling between one waypoint and the next, use the `/ttp/` endpoint instead.
      parameters:
        - name: input
          in: body
          required: true
          schema:
            type: object
            properties:
              waypoints:
                type: array
                items:
                  type: object
                  properties:
                    lat:
                      type: number
                      description: Latitude of the waypoint
                    lng:
                      type: number
                      description: Longitude of the waypoint
                    mode:
                      type: string
                      description: Mode identifier for the transport mode to use starting at this waypoint. Mode identifier should be as returned by regions.json
                    time:
                      type: integer
                      description: Time to start at this waypoint in seconds since 1970. Parameter is optional but exactly one waypoint should have this set.
                  required:
                    - lat
                    - lng
                    - mode
              config:
                $ref: '#/definitions/ConfigInput'
            required:
              - config
              - waypoints
      responses:
        200:
          description: Successful response. Only one trip returned.
          schema:
            $ref: '#/definitions/RoutingResponse'

  /skedgoify.json:
    post:
      tags:
        - Routing
      summary: All-day routing between events
      description: |
        Calculates itinieraries for a complete time period considering
        between a sequence of calendar events and background events (such
        as home, work, or a hotel stay). Considers having to park and
        return vehicles, and handles clashes caused by overlapping events
        or evens that are too close in time but too far in location.

        Also allows to
        - specify which event should get preference in case of a clash (by
          setting the priority of the event input items)
        - fix a trip between two events (by providing it in the input 
          sequence)
        - provide a list of preferred trip patterns between locations (by
          providing it in the optional `patterns` parameter), e.g., "when
          going from home to work, prefer taking train station X".
        - limit the resulting trips to certain modes (by specifying the
          optional `modes` parameter)
        - include private vehicles that can be used (by specifying the
          optional `vehicles` parameter)
      parameters:
        - name: input
          in: body
          required: true
          schema:
            type: object
            properties:
              config:
                $ref: '#/definitions/ConfigInput'
              frame:
                type: object
                properties:
                  startTime:
                    type: number
                    description: Start of the time period in seconds since 1970
                  endTime:
                    type: number
                    description: End of the time period in seconds since 1970
                required:
                  - startTime
                  - endTime
              items:
                type: array
                items:
                  $ref: '#/definitions/SkedgoifyInputItem'
              patterns:
              modes:
              vehicles:
            required:
              - config
              - frame
              - items      
      responses:
        200:
          description: Successful response

  /ttp/:
    post:
      tags:
        - TTP
      summary: Create travelling tourist problem
      description: |
        Creates a new instance of a travelling tourist problem (which is a variant of the [travelling salesman problem](https://en.wikipedia.org/wiki/Travelling_salesman_problem)). The problem is defined as follows: Given both a sorted list `A` and set `B` of locations, insert the locations from the set `B` into `A` in the optimal order somewhere after `A`'s first and before `A`'s last element, while keeping all the elements of `A` in their same relative order. Solutions will also include information on how to travel from one location to the next.

        In the input, `insertInto` is that list `A` and requires at least two elements defining the start and end, and `insert` is the set `B`.

        Note: `B` can be empty, in which case this behaves very similar to `waypoint.json` but rather than returning a single trip that goes via the waypoints you get alternatives for going from one location to the next.

        This servlet does not return the solution, but instead returns an ID which you can use to fetch the solution.

      parameters:
        - name: input
          in: body
          schema:
            type: object
            properties:
              date:
                type: string
                format: date
                description: Date used to determine available services
              modes:
                type: array
                items:
                  type: string
                  format: mode-identifier
                  description: As defined by regions.json
                  minimum: 1
              insert:
                type: array
                items:
                  $ref: '#/definitions/CoordinateWithID'
              insertInto:
                type: array
                items:
                  $ref: '#/definitions/CoordinateWithID'
            required:
              - date
              - modes
              - insertInto
            example:
              - date: 2016-05-30
                modes:
                  - pt_pub
                  - ps_tax
                  - wa_wal
                  - cy_bic-s
                insertInto:
                  - id: 1
                    lat: -33.5
                    lng: 151.1
                  - id: 2
                    lat: -33.6
                    lng: 151.1
                  - id: 3
                    lat: -33.4
                    lng: 150.9
                  - id: 4
                    lat: -33.5
                    lng: 151.1

      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              id:
                type: string
                description: ID of the newly generated problem
            required:
              - id
        400:
          description: Bad request, most likely due to issues with the input
          schema:
            $ref: '#/definitions/InputError'


  /ttp/{id}:
    delete:
      tags:
        - TTP
      summary: Delete travelling tourist problem
      description: Deletes the problem of the provided `id`. This is an optional call as problems will expire automatically.
      parameters:
        - name: id
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successful response
        404:
          description: Problem with provided `id` not found
        410:
          description: Problem has expired

  /ttp/{id}/solution:
    get:
      tags:
        - TTP
      summary: Solution to a travelling tourist problem
      description: |
        Retrieves the solution for the problem of the provided `id`.

        The solution may take some time to be created and might not yet be available, in which case a `299` status code is returned.

        Also note that solutions can change due to data changes (including real-time data). Solutions include a content hash code, which you can provide as an optional query parameter in a new request, and you'll then the solution if it changed or a `304` if it has not changed.
      parameters:
        - name: id
          in: path
          type: string
          required: true
        - name: hashCode
          in: query
          type: integer
          description: Content hash code of solution that has been previously fetched
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/TTPSolution'
        299:
          description: Solution not yet available. Try again later.
        304:
          description: Solution still matches provided hash code.
        404:
          description: Problem with provided `id` not found
        410:
          description: Problem has expired

  /trip/{id}:
    get:
      tags:
        - Trips
      summary: Retrieve previously computed trip
      description:
        Retrieves previously computed trip. **Important:** These will
        only be valid for the typical duration of a session. To save
        a trip for later use, use the `save` endpoint.

        Rather than constructing this URL directly, you should get it
        from the `temporaryURL` property from a computed trip.
      parameters:
        - name: DOCUMENTATION_NOT_COMPLETE
          in: query
          type: boolean
      responses:
        200:
          description: Successful response
    parameters:
      - name: id
        in: path
        type: string
        required: true
        description: Identifier of trip as returned by previous server call.

  /trip/{id}/save:
    get:
      tags:
        - Trips
      summary: Save trip for later use
      description:
        Saves a previously computed trip to the database so that it
        can get retrieved even after the session expired. Useful for
        sharing trips.

        Rather than constructing this URL directly, you should get it
        from the `saveURL` property from a computed trip.
      parameters:
        - name: DOCUMENTATION_NOT_COMPLETE
          in: query
          type: boolean
      responses:
        200:
          description: Successful response
    parameters:
      - name: id
        in: path
        type: string
        required: true
        description: Identifier of trip as returned by previous server call.

  /trip/{id}/update:
    get:
      tags:
        - Trips
      summary: Update trip with real-time data
      description:
        Updates a previously computed trip with latest available real-time
        data.

        Rather than constructing this URL directly, you should get it
        from the `updateURL` property from a computed trip.
      parameters:
        - name: DOCUMENTATION_NOT_COMPLETE
          in: query
          type: boolean
      responses:
        200:
          description: Successful response
    parameters:
      - name: id
        in: path
        type: string
        required: true
        description: Identifier of trip as returned by previous server call.

  /trip/{id}/planned:
    post:
      tags:
        - Trips
      summary: Mark trip as planned by a user
      description:
        Marks a previously computed trip as being planned by the user.
        The server will overwrite trips that were previously marked as
        planned and that overlap the newly planned trip.

        Rather than constructing this URL directly, you should get it
        from the `plannedURL` property from a computed trip.
      parameters:
        - name: DOCUMENTATION_NOT_COMPLETE
          in: query
          type: boolean
      responses:
        200:
          description: Successful response
    parameters:
      - name: id
        in: path
        type: string
        required: true
        description: Identifier of trip as returned by previous server call.

  /auth/{region}:
    get:
      tags:
        - Auth
      summary: available providers for region
      description: >-
        Endpoint to get the available providers for a specific region, with the
        information to signin/logout, depending

        on the status of the user
      produces:
        - application/json
      parameters:
        - name: X-TripGo-RegionEligibility
          in: header
          type: string
          description: app eligibility
        - name: userToken
          in: header
          type: string
          description: Token identifying the user for which the list of booking will be returned. See user management for more details
          required: true
        - name: region
          in: path
          type: string
          required: true
          description: region to look for providers
        - name: mode
          in: query
          type: string
          description: optional filter by mode
        - name: bsb
          in: query
          type: string
          description: boolean parameter to select whether booking uses sandbox or not
      responses:
        200:
          schema:
            description: ''
            type: array
            items:
              $ref: '#/definitions/AuthData'
          headers: {}
          description: Success
        default:
          description: Unexpected error.

  /auth/{provider}/signin:
    get:
      tags:
        - Auth
      summary: singup/login flow
      description: Endpoint to start the signup/login flow for the user to the given provider, derived from /auth/{region}
      produces:
        - application/json
      parameters:
        - name: X-TripGo-RegionEligibility
          in: header
          default: ''
          type: string
          description: app eligibility
        - name: userToken
          in: header
          type: string
          description: Token identifying the user for which the list of booking will be returned. See user management for more details
          required: true
        - name: provider
          in: path
          type: string
          required: true
          description: code
        - name: bsb
          in: query
          type: string
          description: boolean parameter to select whether booking uses sandbox or not
      responses:
        200:
          schema:
            $ref: '#/definitions/BookingForm'
          headers: {}
          description: Success
        default:
          description: Unexpected error.

  /auth/signin/{instanceID}:
    post:
      tags:
        - Auth
      summary: continue singup/login flow
      description: Endpoint to post data for the signup/login flow for the user, derived from /auth/{provider}/signin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: instanceID
          in: path
          type: string
          required: true
          description: id identifying the signup/login flow
        - name: body
          in: body
          schema:
            $ref: '#/definitions/BookingFormData'
          description: sent from the client to be processed by the backend
      responses:
        201:
          schema:
            $ref: '#/definitions/BookingForm'
          headers: {}
          description: Success
        default:
          description: Unexpected error.

  /auth/{provider}/logout:
    get:
      tags:
        - Auth
      summary: logout from provider
      description: Endpoint to remove the data saved for the user to the given provider, derived from /auth/{region}
      operationId: resource_AuthServiceImpl_logOut_GET
      produces:
        - application/json
      parameters:
        - name: X-TripGo-RegionEligibility
          in: header
          default: ''
          type: string
          description: app eligibility
        - name: userToken
          in: header
          type: string
          description: Token identifying the user for which the list of booking will be returned. See user management for more details
          required: true
        - name: provider
          in: path
          type: string
          required: true
          description: code
        - name: bsb
          in: query
          type: string
          description: boolean parameter to select whether booking uses sandbox or not
      responses:
        200:
          schema:
            description: ''
            type: boolean
          headers: {}
          description: Success
        default:
          description: Unexpected error.

  /booking/{tripID}/{segmentID}/info:
    get:
      tags:
        - Form-Based Booking
      summary: Get info of booking options
      description: Returns info for the booking options for the given segment (the url will be obtained from the trip json response)
      parameters:
        - name: tripID
          in: path
          type: string
          required: true
          description: Identifier of trip (as returned by previous server call).
        - name: segmentID
          in: path
          type: string
          required: true
          description: Identifier of segment (as returned by previous server call).
        - name: v
          in: query
          type: string
          description: version of booking API, default is 1 (for future versioning).
        - name: userToken
          in: header
          type: string
          description: Token identifying the user for which the list of booking will be returned. See user management for more details
          required: true
      responses:
        200:
          schema:
            $ref: '#/definitions/BookingForm'
          description: Successful response

  /booking/{version}/{tripID}/{segmentID}/book:
    post:
      tags:
        - Form-Based Booking
      summary: Initiate new booking step-by-step (without step)
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: tripID
          in: path
          type: string
          required: true
          description: Identifier of trip (as returned by previous server call).
        - name: segmentID
          in: path
          type: string
          required: true
          description: Identifier of segment (as returned by previous server call).
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/BookingForm'
    parameters:
      - name: input
        in: body
        schema:
          $ref: '#/definitions/BookingFormData'
        required: true
        description: Identifier of booking as returned by previous server call.


  /booking/{version}/{tripID}/{segmentID}/book/{step}:
    post:
      tags:
        - Form-Based Booking
      summary: Initiate new booking step-by-step
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: tripID
          in: path
          type: string
          required: true
          description: Identifier of trip (as returned by previous server call).
        - name: segmentID
          in: path
          type: string
          required: true
          description: Identifier of segment (as returned by previous server call).
        - name: step
          in: path
          type: string
          required: true
          description: step of booking flow (as returned by previous server call)
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/BookingForm'
    parameters:
      - name: input
        in: body
        schema:
          $ref: '#/definitions/BookingFormData'
        required: true
        description: Identifier of booking as returned by previous server call.
    get:
      tags:
        - Form-Based Booking
      summary: Initiate new booking step-by-step
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: tripID
          in: path
          type: string
          required: true
          description: Identifier of trip (as returned by previous server call).
        - name: segmentID
          in: path
          type: string
          required: true
          description: Identifier of segment (as returned by previous server call).
        - name: step
          in: path
          type: string
          required: true
          description: step of booking flow (as returned by previous server call)
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/BookingForm'

  /booking/{version}/{tripID}/{segmentID}/payment:
    post:
      tags:
        - Form-Based Booking
      summary: Initiate payment for a new booking
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: tripID
          in: path
          type: string
          required: true
          description: Identifier of trip (as returned by previous server call).
        - name: segmentID
          in: path
          type: string
          required: true
          description: Identifier of segment (as returned by previous server call).
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/PaymentForm'
    parameters:
      - name: input
        in: body
        schema:
          $ref: '#/definitions/BookingFormData'
        required: true
        description: Identifier of booking as returned by previous server call.

  /booking/{version}/{tripID}/{segmentID}/confirm:
    post:
      tags:
        - Form-Based Booking
      summary: Confirm new booking
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: tripID
          in: path
          type: string
          required: true
          description: Identifier of trip (as returned by previous server call).
        - name: segmentID
          in: path
          type: string
          required: true
          description: Identifier of segment (as returned by previous server call).
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/BookingForm'

    parameters:
      - name: input
        in: body
        schema:
          $ref: '#/definitions/BookingFormData'
        required: true
        description: Identifier of booking as returned by previous server call.

  /booking/{version}/{token}/status:
    get:
      tags:
        - Form-Based Booking
      summary: Get status of confirmed booking
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: token
          in: path
          type: string
          required: true
          description: Booking token as returned by previous server call.
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/BookingForm'

  /booking/{version}/{token}/cancel:
    post:
      tags:
        - Form-Based Booking
      summary: cancel booking (POST)
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: token
          in: path
          type: string
          required: true
          description: Booking token as returned by previous server call.
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/BookingForm'
    parameters:
      - name: input
        in: body
        schema:
          $ref: '#/definitions/BookingFormData'
        required: true
        description: Identifier of booking as returned by previous server call.

    get:
      tags:
        - Form-Based Booking
      summary: cancel booking (GET)
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: token
          in: path
          type: string
          required: true
          description: Booking token as returned by previous server call.
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/BookingForm'

  /booking/{version}/{token}/rate:
    get:
      tags:
        - Form-Based Booking
      summary: get rate booking form
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: token
          in: path
          type: string
          required: true
          description: Booking token as returned by previous server call.
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/BookingForm'
    post:
      tags:
        - Form-Based Booking
      summary: submit rate for booking
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: token
          in: path
          type: string
          required: true
          description: Booking token as returned by previous server call.
      responses:
        200:
          description: Successful response, with emtpy Json response
        400:
          description: On error
    parameters:
      - name: input
        in: body
        schema:
          $ref: '#/definitions/BookingFormData'
        required: true
        description: Identifier of booking as returned by previous server call.

  /booking/{version}/{token}/update:
    get:
      tags:
        - Form-Based Booking
      summary: Updated trip for confirmed booking
      description: The updated trip will consider potential modifications that the user made during the booking flow, such as selecting a specific vehicle, or changing the pick up time or location.
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: token
          in: path
          type: string
          required: true
          description: Booking token as returned by previous server call.
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/RoutingResponse'

  /booking/{version}/{token}/pay.html:
    get:
      tags:
        - Form-Based Booking
      summary: Initiate payment for confirmed booking (on web browser)
      description: Initiate payment for confirmed booking (on web browser), TODO remove .html, swagger don't support overloaded paths
      produces:
        - text/html
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: token
          in: path
          type: string
          required: true
          description: Booking token as returned by previous server call.
      responses:
        200:
          description: returns the html webpage for the user to enter payment details
          schema:
            type: string
    post:
      tags:
        - Form-Based Booking
      summary: Attempt payment (Form)
      description: Attempt payment, TODO remove .html, swagger don't support overloaded paths
      produces:
        - text/html
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: version of booking API, default is v1 (for future versioning).
        - name: token
          in: path
          type: string
          required: true
          description: Booking token as returned by previous server call.
        - name: payment_method_token
          in: query
          type: string
          description: spreedly token.
        - name: stripeToken
          in: query
          type: string
          description: stripe token.
        - name: payment_method_nonce
          in: query
          type: string
          description: braintree token
      responses:
        200:
          description: "returns 'Payment successful - go back to the app' if successful or 'There was an unexpected error!' otherwise"
          schema:
            type: string

  /booking/{version}/{token}/pay:
    get:
      tags:
        - Form-Based Booking
      summary: Initiate payment for confirmed booking (in-app)
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: token
          in: path
          type: string
          required: true
          description: Booking token as returned by previous server call.
      responses:
        200:
          description: returns token for in app payment
          schema:
            $ref: '#/definitions/PaymentToken'
    post:
      tags:
        - Form-Based Booking
      summary: Attempt payment (in-app)
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: token
          in: path
          type: string
          required: true
          description: Booking token as returned by previous server call.
      responses:
        200:
          description: returns the html webpage for the user to enter payment details
          schema:
            type: string
    parameters:
      - name: input
        in: body
        schema:
          $ref: '#/definitions/PaymentData'
        required: true


  /booking/{version}/{tripID}/{segmentID}/quick:
    get:
      tags:
        - Quick Booking
      summary: quick booking info
      description: Endpoint with information to populate quick booking screen
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: tripID
          in: path
          type: string
          required: true
          description: Identifier of trip (as returned by previous server call).
        - name: segmentID
          in: path
          type: string
          required: true
          description: Identifier of segment (as returned by previous server call).
        - name: first
          in: query
          type: integer
          description: first item of the list (starting from 1)
          default: 1
        - name: max
          in: query
          type: integer
          description: max number of bookings returned
          default: 7
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/LocalizedQuickBookingInfo'

  /booking/{version}/{tripID}/{segmentID}/quick/{serviceID}:
    get:
      tags:
        - Quick Booking
      summary: specific service info
      description: Endpoint with information to populate booking screen
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: tripID
          in: path
          type: string
          required: true
          description: Identifier of trip (as returned by previous server call).
        - name: segmentID
          in: path
          type: string
          required: true
          description: Identifier of segment (as returned by previous server call).
        - name: serviceID
          in: path
          type: string
          required: true
          description: Identifier of service (as returned by previous server call).
        - name: userToken
          in: header
          type: string
          description: Token identifying the user for which booking info will be returned. See user management for more details
          required: true
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/BookingForm'
        201:
          description: (200) in case of missing userToken, errorCode will be 444, so the app can trigger silent log in or signup
          schema:
            $ref: '#/definitions/ErrorMessage'
          examples:
            application/json:
              {
                "errorCode": 444,
                "error" : "Missing userToken",
                "usererror" : true
              }


  /booking/{version}/{tripID}/{segmentID}/update/{serviceID}:
    get:
      tags:
        - Quick Booking
      summary: update trip for service
      description: Endpoint to update the trip for a specific service
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: tripID
          in: path
          type: string
          required: true
          description: Identifier of trip (as returned by previous server call).
        - name: segmentID
          in: path
          type: string
          required: true
          description: Identifier of segment (as returned by previous server call).
        - name: serviceID
          in: path
          type: string
          required: true
          description: Identifier of service (as returned by previous server call).
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/RoutingResponse'

  /booking/{version}/{tripID}/{segmentID}/details/{quoteId}:
    get:
      tags:
        - Quick Booking
      summary: quote details
      description: Endpoint to get the details of a specific quote
      parameters:
        - name: version
          in: path
          type: string
          required: true
          description: Version of booking API, default is v1 (for future versioning).
        - name: tripID
          in: path
          type: string
          required: true
          description: Identifier of trip (as returned by previous server call).
        - name: segmentID
          in: path
          type: string
          required: true
          description: Identifier of segment (as returned by previous server call).
        - name: quoteId
          in: path
          type: string
          required: true
          description: Identifier of quote (as returned by previous server call).
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/BookingForm'

  /booking:
    get:
      tags:
        - Booking Beta
      summary: Get list of bookings
      description: sorted by (valid,latest) first. Using the time of the booking (the moment when it was done).
      parameters:
      - name: first
        in: query
        type: integer
        description: first item of the list (starting from 1)
        default: 1
      - name: max
        in: query
        type: integer
        description: max number of bookings returned
        default: 7
      - name: validOnly
        in: query
        type: boolean
        description: valid only or all bookings made
        default: false
      - name: userToken
        in: header
        type: string
        description: Token identifying the user for which the list of booking will be returned. See user management for more details
        required: true
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/BookingsResponse'
        201:
          description: (200) in case of missing userToken, errorCode will be 444, so the app can trigger silent log in or signup
          schema:
            $ref: '#/definitions/ErrorMessage'
          examples:
            application/json:
              {
                "errorCode": 444,
                "error" : "Missing userToken",
                "usererror" : true
              }

  /booking/valid/count:
    get:
      tags:
        - Booking Beta
      summary: Get valid bookings count.
      parameters:
        - name: userToken
          in: header
          type: string
          description: Token identifying the user for which the list of booking will be returned. See user management for more details
          required: true
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/BookingsCountResponse'
        201:
          description: (200) in case of missing userToken, errorCode will be 444, so the app can trigger silent log in or signup
          schema:
            $ref: '#/definitions/ErrorMessage'
          examples:
            application/json:
              {
                "errorCode": 444,
                "error" : "Missing userToken",
                "usererror" : true
              }


  /geocode.json:
    get:
      tags:
        - Geocode
      summary: Search and autocompletion
      description:
        Gets the transit stops and other POIs matching a provided search
        string. Optionally does auto completion.
      parameters:
        - name: q
          in: query
          type: string
          description: Search term
          required: true
        - name: near
          in: query
          type: string
          description: Nearby coordinate as `(lat,lng)` string.
          required: true
        - name: a
          in: query
          type: boolean
          description: Set to `true` when results are used for autocompletion.
          default: false
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              query:
                type: string
                description: Search term as provided in input
              choices:
                type: array
                description: Matching results. Might also be of type `StopLocation`.
                items:
                  $ref: '#/definitions/Location'

  /locations.json:
    post:
      tags:
        - Locations
      summary: POIs for map region
      description:
        Gets points of interest for a provided map region. Which POIs are included depends on the enabled modes (by default public transport only). For public transport, transit stops are displayed; for driving, car parks; for bike share, bike share pods; for car share, car share locations; etc.

        The way map regions are specified takes a bit of getting used to but it's worth it, as it allows caching results on the client, while frequently calling this endpoint to make sure the local data is update without requiring a lot of data overhead (and having most of the logic on the server).

        For an explanation, [please see our developer site](http://skedgo.github.io/tripgo-api/site/advanced/#locations-cell-ids-and-hash-codes).
      externalDocs:
        description: Locations, cell IDs and hash codes
        url: http://skedgo.github.io/tripgo-api/site/advanced/#locations-cell-ids-and-hash-codes
      parameters:
        - name: input
          in: body
          schema:
            type: object
            properties:
              region:
                type: string
                description: Region code from `regions.json` for which to fetch locations from.
              level:
                type: integer
                description: 1 to get major locations that should be displayed when zoomed out. 2 to get minor locations that should be displayed when zoomed in.
                # minValue: 1
                # maxValue: 2
                default: 1
              cellIDs:
                type: array
                description: When `level` isn't 1, either this or `cellIDHashCodes` is required.
                items:
                  type: string
              cellIDHashCodes:
                type: object
                description: When `level` isn't 1, either this or `cellIDs` is required.
                properties:
                  $cellID:
                    type: integer
                    description: Key is cell ID. Hash code should be as returned by previous call where you likely used `cellIDs`.
              cellsPerDegree:
                type: integer
                default: 75
              modes:
                type: array
                description: Mode identifiers for which to include POIs.
                default:
                  - pt_pub
                items:
                  type: string
            required:
              - region
            example:
              - region: AU_NSW_Sydney
                level: 2
                cellIDs:
                  - -2540#11340
                  - -2540#11341
                  - -2540#11342
                  - -2541#11340
                  - -2541#11341
                  - -2541#11342

      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              groups:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                      description: cellID
                    hashCode:
                      type: integer
                      description: Hash code of content
                    bikePods:
                      type: array
                      items:
                        $ref: '#/definitions/BikePodLocation'
                    # carParks:
                    #   type: array
                    #   items:
                    #     $ref: '#/definitions/CarParkLocation'
                    # carPods:
                    #   type: array
                    #   items:
                    #     $ref: '#/definitions/CarPodLocation'
                    carRentals:
                      type: array
                      items:
                        $ref: '#/definitions/CarRentalLocation'
                    stops:
                      type: array
                      items:
                        $ref: '#/definitions/StopLocation'
                  required:
                    - key
                    - hashCode

  /locationInfo.json:
    get:
      tags:
        - Locations
      summary: Additional details for a coordinate
      description:
        Gets details, including real-time information, for the provided location (either identifier by a coordinate or a unique identifier). Returns what3words information and, if available, a nearby transit stop and car park.
      parameters:
        - name: lat
          in: query
          type: number
          description: Latitude
        - name: lng
          in: query
          type: number
          description: Longitude
        - name: identifier
          in: query
          type: string
          description: Unique identifier for this location, required if lat/lng are not provided
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/LocationInfo'

  /departures.json:
    post:
      tags:
        - Stops
      summary: Departure timetable for stop
      description: |
        Gets the departure timetable for a provided list of transit stops. It returns the next `limit` departures after `timeStamp` across any of the provided `embarkationStops`. If multiple stops are provided, the returned services might therefore only cover a subset of the provided stops.

        If `disembarkationStops` is provided, then the returned timetable covers only services between any of the embarkation stops and any of the disembarkation stops. If the region of the embarkation stops and the region of the disembarkations stops is not the same, then you must specify the `disembarkationRegion` of the `disembarkationStops`.

        Note that the the stop codes in the embarkation stops might *not* match the stop codes provided in the input. This happens if the input specified the stop code of a "parent" station (e.g., a major train station) but all the departures are from one of the parent station's "children" (e.g., a platform of that train station). If that's the case, then the `parentInfo` array will provide additional information on the parent station and its children.
      parameters:
        - name: input
          in: body
          schema:
            type: object
            properties:
              region:
                type: string
                description: Region code from `regions.json` for which to fetch the timetable.
              embarkationStops:
                type: array
                items:
                  type: string
                  description: Code of a StopLocation as previously returned by `locations.json`. Currently only a single parent stop is allowed in that list.
              disembarkationRegion:
                type: string
                description: Region code from `regions.json` for the `disembarkationStops` when the region of `embarkationStops` and `disembarkationStops` does not match.
              disembarkationStops:
                type: array
                items:
                  type: string
                  description: Code of a StopLocation as previously returned by `locations.json`
              timeStamp:
                type: integer
                description: Seconds since 1970 of earliest time to include in timetable. Default value is current time.
              limit:
                type: integer
                description: Number of services to include in timetable.
                default: 50
            required:
              - region
              - embarkationStops
            example:
              - region: AU_NSW_Sydney
                embarkationStops:
                  - "2035143"
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              embarkationStops:
                type: array
                items:
                  type: object
                  properties:
                    stopCode:
                      type: string
                    services:
                      type: array
                      items:
                        $ref: '#/definitions/ServiceDeparture'
              parentInfo:
                $ref: '#/definitions/StopLocationParent'
                # type: array
                # items:
                #   $ref: '#/definitions/StopLocationParent'
              alerts:
                type: array
                items:
                  $ref: '#/definitions/RealTimeAlert'
            required:
              - embarkationStops

  /arrivals.json:
    post:
      tags:
        - Stops
      summary: Arrival timetable for stop
      description:
        Gets the arrival timetable for a provided transit stop by the stop's ID.
      parameters:
        - name: DOCUMENTATION_NOT_COMPLETE
          in: query
          type: boolean
      responses:
        200:
          description: Successful response

  /latest.json:
    post:
      tags:
        - Services
      summary: Real-time information for a transit service
      parameters:
        - name: input
          in: body
          schema:
            type: object
            properties:
              region:
                type: string
                description: Region code from `regions.json` for which to fetch the real-time information.
              services:
                type: array
                items:
                  type: object
                  properties:
                    operator:
                      type: string
                    serviceTripID:
                      type: string
                    startStopCode:
                      type: string
                    startTime:
                      type: integer
                      description: Departure time at `startStopCode` in seconds since 1970. The parameter is optional, but highly recommended. If you don't get real-time data, add this parameter.
                    endStopCode:
                      type: string
                  required:
                    - operator
                    - serviceTripID
                    - startStopCode
            required:
              - region
              - services
            example:
              - region: AU_NSW_Sydney
                services:
                  - operator: Sydney Buses
                    serviceTripID: "76641565_20160307_11954"
                    startStopCode: "2035143"
                  - operator: Sydney Buses
                    serviceTripID: "76640498_20160307_11954"
                    startStopCode: "2035143"
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              services:
                type: array
                items:
                  type: object
                  properties:
                    serviceTripID:
                      type: string
                    startStopCode:
                      type: string
                    startTime:
                      type: integer
                      description: Predicted departure time based on real-time information in seconds since 1970.
                    lastUpdate:
                      type: integer
                      description: Time the departure/arrival time prediction was made in seconds since 1970.
                    realtimeVehicle:
                      # description: The vehicle for this specific service.
                      $ref: '#/definitions/RealTimeVehicle'
                    realtimeAlternativeVehicle:
                      description: Alternative vehicles for the same route, but not necessarily, this specific service.
                      type: array
                      items:
                        $ref: '#/definitions/RealTimeVehicle'
                    alerts:
                      description: Service alerts / disruption information that affect this service.
                      type: array
                      items:
                        $ref: '#/definitions/RealTimeAlert'
                  required:
                    - serviceTripID
            required:
              - services

  /service.json:
    get:
      tags:
        - Services
      summary: Get details of transit service.
      description: |
        Gets the details of a transit service from the traveller's perspective. This means that it can include multiple shapes if the vehicle is continuing on as a different service at its destination and if travellers can stay on that vehicle.
      parameters:
        - name: region
          in: query
          type: string
          description: Region identifier as returned by `regions.json`.
          required: true
        - name: serviceTripID
          in: query
          type: string
          description: Identifier of service as returned by other servlets.
          required: true
        - name: operator
          in: query
          type: string
          description: Operator of service as returned other servlets. Not required but recommended as a `serviceTripID` might match multiple operators; in that case and when `operator` is not provide, a service details for a random operator will be returned.
        - name: embarkationDate
          in: query
          type: integer
          description: Departure time of service in seconds since 1970.
          required: true
        - name: encode
          in: query
          type: boolean
          description: Set to `true` to receive waypoints as encoded polyline.
          default: false
        - name: startStopCode
          in: query
          type: string
          description: Stop code of embarkation. First stop to be considered "travelled".
          required: false
        - name: endStopCode
          in: query
          type: string
          description: Stop code of disembarkation. Last stop to be considered "travelled".
          required: false
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              shapes:
                type: array
                items:
                  $ref: '#/definitions/ServiceShape'
              realTimeStatus:
                type: string
                description: Indicator for whether real-time information is available for this service. Note that even if this says the service is real-time, this does not mean the `startTime` is real-time.
                enum:
                  - IS_REAL_TIME
                  - CAPABLE
                  - INCAPABLE
              realtimeVehicle:
                # description: The vehicle for this specific service.
                $ref: '#/definitions/RealTimeVehicle'
              realtimeAlternativeVehicle:
                description: Alternative vehicles for the same route, but not necessarily, this specific service.
                type: array
                items:
                  $ref: '#/definitions/RealTimeVehicle'
              alerts:
                description: Service alerts / disruption information that affect this service.
                type: array
                items:
                  $ref: '#/definitions/RealTimeAlert'
              bicycleAccessible:
                type: boolean
                description: Can you take a bicycle on this service? Missing when unknown.
              wheelchairAccessible:
                type: boolean
                description: |
                  If this service is wheelchair accessible or not. If this field is missing, this does not mean that it is not accessible, but rather that it is unknown whether it is accessible. Only if the value is present and is `false`, does it mean that the service is not wheelchair accessible.

  /alerts/transit.json:
    get:
      tags:
        - Alerts
      summary: Get real-time alerts
      parameters:
        - name: region
          in: query
          type: string
          required: true
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              alerts:
                $ref: '#/definitions/AlertsInfo'
            required:
              - alerts
        400:
          description: Bad request due to bad input data

#  /account/login:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/login"
#  /account/logout:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/logout"
#  '/account/reset/{email}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/reset-{email}"
#  '/account/validate/reset/{token}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/validate-reset-{token}"
#  /account/password/change:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/password-change"
#  '/account/password/{token}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/password-{token}"
#  /account/password/validate:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/password-validate"
#  /account/signup:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/signup"
#  '/account/validate/signup/{token}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/validate-signup-{token}"
#  /account/alias:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/alias"
#  '/account/alias/{email}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/alias-{email}"
#  '/account/alias/primary/{email}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/alias-primary-{email}"
#  '/account/alias/validate/{token}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/alias-validate-{token}"
#  '/account/android/{token}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/android-{token}"
#  '/account/apple/{token}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/apple-{token}"
#  '/account/google/{token}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/google-{token}"
#  '/account/facebook/{token}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/facebook-{token}"
#  '/account/twitter/{token}/{secret}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/twitter-{token}-{secret}"
#  '/account/twitter_callback/{oauthToken}/{verifier}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/account.paths.yaml#/twitter_callback-{oauthToken}-{verifier}"
#  /api/appdata/full:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/appdata-full"
#  /api/appdata/me:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/appdata-me"
#  '/api/appdata/latestuserIDs/{timestamp}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/appdata-latestuserIDs-{timestamp}"
#  /api/appdata:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/appdata"
#  /api/appdata/userIDs:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/appdata-userIDs"
#  '/api/eventinfo/{id}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/eventinfo-{id}"
#  /api/eventinfo/array:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/eventinfo-array"
#  /api/eventinfo:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/eventinfo"
#  '/api/favorite/{id}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/favorite-{id}"
#  /api/favorite:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/favorite"
#  /api/favorite/array:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/favorite-array"
#  '/api/habitual/{id}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/habitual-{id}"
#  /api/habitual:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/habitual"
#  /api/habitual/array:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/habitual-array"
#  /api/history:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/history"
#  /api/history/array:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/history-array"
#  /api/locationkey/array:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/locationkey-array"
#  '/api/locationkey/{id}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/locationkey-{id}"
#  /api/locationkey:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/locationkey"
#  /api/tripitem:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/tripitem"
#  '/api/tripitem/{id}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/tripitem-{id}"
#  /api/tripitem/array:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/tripitem-array"
#  /api/trip:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/trip"
#  '/api/trip/{id}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/trip-{id}"
#  /api/user:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/user"
#  /api/user/phone:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/user-phone"
#  '/api/user/phone/{id}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/user-phone-{id}"
#  '/api/user/phone/validate/{userID}/{phoneID}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/user-phone-validate-{userID}-{phoneID}"
#  /api/user/image:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/user-image"
#  '/api/user/image/large/{userID}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/user-image-large-{userID}"
#  '/api/user/image/small/{userID}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/user-image-small-{userID}"
#  '/api/vehicle/{id}':
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/vehicle-{id}"
#  /api/vehicle/array:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/vehicle-array"
#  /api/vehicle:
#    $ref: "https://skedgo.github.io/tripgo-api/modules/user.paths.yaml#/vehicle"

definitions:
  RegionsInput:
    type: object
    properties:
      v:
        type: number
        format: int32
        description: Version number
        minimum: 2
        maximum: 2
        multipleOf: 1
      hashCode:
        type: integer
        description: Hash code of your last response. If this is supplied the response might only consist of the hashCode and no other content, if the data has not changed.
    required:
      - v
    example:
      v: 2

  RegionsResponse:
    properties:
      hashCode:
        type: integer
        description: Hash code of the content of the response. You can pass this as an input parameter, if you only want to get content in the response if the data has changed.
      regions:
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/Region'
      modes:
        type: object
        properties:
          $modeIdentifier:
            type: object
            description: This is a map/dictionary with multiple items of this type. Each key is a mode identifier. See http://skedgo.github.io/tripgo-api/site/advanced/#mode-identifiers.
            properties:
              title:
                type: string
              URL:
                type: string
              color:
                $ref: '#/definitions/Color'
              icon:
                type: string
                description: File name part for downloading an image for this mode. [See separate documentation](TODO) for how to construct a URL from this.
              implies:
                type: string
                description: Another mode identifier that is required by this one, e.g., you can't request only school buses without also requesting regular public transport.
            required:
              - title

  RegionInfoInput:
    type: object
    properties:
      region:
        type: string
        description: Region name/code from `regions.json`
    required:
      - region
    example:
      region: DE_HH_Hamburg

  RegionInfoResponse:
    properties:
      regions:
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/RegionDetail'

  RoutingResponse:
    properties:
      groups:
        type: array
        items:
          $ref: '#/definitions/TripGroup'
      segmentTemplates:
        type: array
        items:
          $ref: '#/definitions/SegmentTemplate'
      regions:
        type: array
        items:
          type: string
      alerts:
        type: array
        items:
          $ref: '#/definitions/RealTimeAlert'
      error:
        type: string
      usererror:
        type: boolean
    # example:
    #   regions:
    #     - DE_BV_Nuremberg

  ConfigInput:
    type: object
    properties:
      v:
        type: integer
        description: Requested version number of output. Needs to be 11.
        minimum: 11
        maximum: 11
        multipleOf: 1
      tt:
        type: integer
        description: Preferred transfer time in minutes.
        default: 3
        minimum: 0
        multipleOf: 1
      ws:
        type: integer
        description: Walking speed. 0 slow, 1 medium, 2 fast.
        default: 1
        minimum: 0
        maximum: 2
        multipleOf: 1
      cs:
        type: integer
        description: Cycling speed. 0 slow, 1 medium, 2 fast.
        default: 1
        minimum: 0
        maximum: 2
        multipleOf: 1
      conc:
        type: boolean
        description: If concession pricing should be use for public transport
        default: false
      wheelchair:
        type: boolean
        description: If user is on wheelchair
        default: false
      wp:
        type: string
        description:
          String with `(%f,%f,%f,%f)` format specifying the user's weighting profile. In order, the weights represent price, environmental impact, duration, and convenience. Each value should be between 0.1 and 2.0. 0.1 means the related cost is unimportant and 2.0 means it's very important to the user. This impacts both the routing results and each trip's `weightedScore` value.
        default: (1, 1, 1, 1)
    required:
      - v

  SkedgoifyInputItem:
    properties:
      class:
        type: string
        description: Kind of input item. For events, also see the additional properties
          in `SkedgoifyEventInputItem` and for trips those in `SkedgoifyTripInputItem`.
        enum:
          - event
          - trip
      id:
        type: string
        description: Arbitrary identifier for this input item
      startTime:
        type: number
        description: Start time in seconds since 1970
      endTime:
        type: number
        description: End time in seconds since 1970
    required:
      - class
      - id
      - startTime
      - endTime

  SkedgoifyEventInputItem:
    allOf:
    - $ref: '#/definitions/SkedgoifyInputItem'
    - type: object
      properties:
        location:
          $ref: '#/definitions/Coordinate'
        priority:
          type: number
          description: The priority of this event, used for handling clashes.
            To give an event a higher priority, assign it a higher value. 
            Typical values are 9 for the user's current location (i.e., the
            resulting trips should always respect where the user currently is),
            5 for calendar events, 2 for locations the users typically goes
            at this time (e.g., work or school), 1 for the a hotel stay, and
            0 for the user's home.
        direct:
          type: boolean
          description: If the resulting trips should go to this event directly
            rather than, say, going back home in between the previous event
            and this event.
          default: false
      required:
        - location
        - priority
      

  SkedgoifyTripInputItem:
    allOf:
    - $ref: '#/definitions/SkedgoifyInputItem'
    - type: object
      properties:
        startLocation:
          $ref: '#/definitions/Coordinate'
        endLocation:
          $ref: '#/definitions/Coordinate'
        modes:
          type: array
          items:
            type: string
            description: Used mode identifier
      required:
        - startLocation
        - endLocation
        - modes

  BookingInfo:
    properties:
      title:
        type: string
        description: Localized title for booking button.
      externalActions:
        type: array
        items:
          type: string
          description: URL or Identifiers such as `lyft` for app-to-app integration.
      url:
        type: string
        description: URL for Form-Based booking flow
      quickBookingsUrl:
        type: string
        description: URL for quick booking flow
      productID:
        type: string
        description: ID of the product in externalActions (currently only used for Uber and Lyft)
      confirmation:
        $ref: '#/definitions/LocalizedBookingConfirmationInfo'
    required:
      - title

  Color:
    properties:
      red:
        type: integer
        minimum: 0
        maximum: 255
      blue:
        type: integer
        minimum: 0
        maximum: 255
      green:
        type: integer
        minimum: 0
        maximum: 255
    required:
      - red
      - blue
      - green

  Coordinate:
    properties:
      lat:
        type: number
        description: Latitude
      lng:
        type: number
        description: Longitude
    required:
      - lat
      - lng
  
  CoordinateWithID:
    allOf:
    - $ref: '#/definitions/Coordinate'
    - type: object
        properties:
          id:
            type: string
        required:
          - id

  Location:
    allOf:
    - $ref: '#/definitions/Coordinate'
    - type: object
        properties:
          timezone:
            type: string
            description: Timezone identifier
          address:
            type: string
        required:
          - timezone

  StopLocation:
    allOf:
    - $ref: '#/definitions/Location'
    - type: object
      properties:
        code:
          type: string
          description: Internal identifier for the stop
        name:
          type: string
          description: Official name of the stop
        popularity:
          type: integer
          description: Number for popularity of stop defined by number of services and their types.
        modeInfo:
          $ref: '#/definitions/ModeInfo'
      required:
        - code
        - name
        - popularity
        - modeInfo

  StopLocationParent:
    allOf:
    - $ref: '#/definitions/StopLocation'
    - type: object
      properties:
        children:
          type: array
          items:
            allOf:
              - $ref: '#/definitions/StopLocation'
              - type: object
                properties:
                  childName:
                    type: string
                    description: Platform number

  BikePodInfo:
    properties:
      identifier:
        type: string
      operator:
        $ref: '#/definitions/CompanyInfo'
      inService:
        description: Whether this pod is currently in service (e.g., some might be closed for maintenance or during winter months)
        type: boolean
      totalSpaces:
        description: Static information of total spaces
        type: integer
      availableBikes:
        type: integer
      lastUpdated:
        description: Timestamp `availableBikes` got recorded in seconds since 1970
        type: integer
      source:
        $ref: '#/definitions/DataSourceAttribution'
    required:
      - identifier
      - operator

  BikePodLocation:
    allOf:
    - $ref: '#/definitions/Location'
    - type: object
      properties:
        bikePod:
          $ref: '#/definitions/BikePodInfo'
        modeInfo:
          $ref: '#/definitions/ModeInfo'
      required:
        - bikePod
        - modeInfo

  CarParkInfo:
    properties:
      identifier:
        type: string
      name:
        type: string
      operator:
        $ref: '#/definitions/CompanyInfo'
      totalSpaces:
        description: Static information of total spaces
        type: integer
      availableSpaces:
        description: Real-time information of available spaces
        type: integer
      lastUpdated:
        description: Timestamp `availablSpaces` got recorded in seconds since 1970
        type: integer
      openingHours:
        $ref: '#/definitions/OpeningHours'
      pricingTable:
        $ref: '#/definitions/PricingTable'
      source:
        $ref: '#/definitions/DataSourceAttribution'
    required:
      - identifier
      - name

  CarParkLocation:
    allOf:
    - $ref: '#/definitions/Location'
    - type: object
      properties:
        carPark:
          $ref: '#/definitions/CarParkInfo'
        modeInfo:
          $ref: '#/definitions/ModeInfo'
      required:
        - carPark
        - modeInfo

  CarPodInfo:
    properties:
      identifier:
        type: string
      operator:
        $ref: '#/definitions/CompanyInfo'
      vehicles:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            description:
              description: Long-form description of the vehicle
              type: string
            licensePlate:
              type: string
            engineType:
              type: string
            fuelType:
              type: string
            fuelLevel:
              description: Pcercentage how full the vehicle is
              type: integer
              # minValue: 0
              # maxValue: 100
              # multipleOf: 1
            pricingTable:
              $ref: '#/definitions/PricingTable'
    required:
      - identifier
      - operator
      - vehicles

  CarPodLocation:
    allOf:
    - $ref: '#/definitions/Location'
    - type: object
      properties:
        carPod:
          $ref: '#/definitions/CarPodInfo'
        modeInfo:
          $ref: '#/definitions/ModeInfo'
      required:
        - carPod
        - modeInfo

  CarRentalInfo:
    properties:
      identifier:
        type: string
      company:
        $ref: '#/definitions/CompanyInfo'
      openingHours:
        $ref: '#/definitions/OpeningHours'
      source:
        $ref: '#/definitions/DataSourceAttribution'
    required:
      - identifier
      - company

  CarRentalLocation:
    allOf:
    - $ref: '#/definitions/Location'
    - type: object
      properties:
        carRental:
          $ref: '#/definitions/CarRentalInfo'
        modeInfo:
          $ref: '#/definitions/ModeInfo'
      required:
        - carRental
        - modeInfo

  CompanyInfo:
    properties:
      name:
        type: string
      phone:
        type: string
      website:
        type: string
      remoteIcon:
        type: string
      remoteDarkIcon:
        type: string
      color:
        $ref: '#/definitions/Color'
    required:
      - name

  DataSourceAttribution:
    description:
      Information on how data should get attributed. When present, this needs to get displayed on relevant screens / views.
    properties:
      provider:
        $ref: '#/definitions/CompanyInfo'
      disclaimer:
        type: string
        description: Longer disclaimer that should be displayed for this provider
    required:
      - provider

  LocationInfo:
      allOf:
    - $ref: '#/definitions/Coordinate'
    - type: object
        properties:
          details:
            properties:
              w3w:
                type: string
              w3wInfoURL:
                type: string
          stop:
            $ref: '#/definitions/StopLocation'
          bikePod:
            $ref: '#/definitions/BikePodInfo'
        #   carPark:
        #     $ref: '#/definitions/CarParkInfo'
        #   carPod:
        #     $ref: '#/definitions/CarPodInfo'
          carRental:
            $ref: '#/definitions/CarRentalInfo'

  ModeInfo:
    properties:
      identifier:
        description: |
          Typically a mode-identifier, but it can be more specific that the one from the query, e.g., `pt_pub_bus` even though the query requested `pt_pub`. Missing for stationary segments.
        type: string
      alt:
        description: Textual alternative to icon
        type: string
      localIcon:
        description: Part of icon file name that should be shipped with app.
        type: string
      remoteIcon:
        description: Part of icon file name that can be fetched from server.
        type: string
      remoteDarkIcon:
        description: Part of icon file name for dark background that can be  fetched from server.
        type: string
      color:
        $ref: '#/definitions/Color'
    required:
      - alt
      - localIcon

  OpeningHours:
    properties:
      timezone:
        description: Time zone for the opening hours
        type: string
      days:
        type: array
        items:
          type: object
          properties:
            name:
              description: Identifier for week
              type: string
              enum:
                - MONDAY
                - TUESDAY
                - WEDNESDAY
                - THURSDAY
                - FRIDAY
                - SATURDAY
                - SUNDAY
                - PUBLIC_HOLIDAY
            times:
              description: Opening times for this day of week. Empty array if it's closed that day.
              type: array
              items:
                type: object
                properties:
                  opens:
                    type: string
                    description: Opening time formatted as HH:MM
                  closes:
                    type: string
                    description: Opening time formatted as HH:MM
                required:
                  - opens
                  - closes
          required:
            - name
            - times
    required:
      - timezone
      - days
    example:
      - timezone: Australia/Sydney
        days:
          - name: MONDAY
            times:
              - opens: 09:00
                closes: 13:00
              - opens: 18:00
                closes: 02:00

  PricingTable:
    properties:
      title:
        type: string
      subtitle:
        type: string
      currency:
        type: string
      currencySymbol:
        type: string
      entries:
        type: array
        items:
          type: object
          properties:
            label:
              type: string
            price:
              type: number
          required:
            - label
            - price
    required:
      - title
      - currency
      - currencySymbol
      - entries
    example:
      - title: Casual pricing
        currency: AUD
        currencySymbol: $
        entries:
          - label: First hour
            price: 0
          - label: 1+ hours
            price: 29
      - title: Weekend pricing
        subtitle: Flat rate per exit, per day
        currency: AUD
        currencySymbol: $
        entries:
          - label: Sat - Sun
            price: 22

  RealTimeAlert:
    description:
      An alert or warning, typically used for services, trip segments, or stop locations.
    properties:
      title:
        type: string
      hashCode:
        type: integer
        description:  |
          Hash code of this alert. Used when servlets provide a list of alerts separately
          from services or trip segments referencing them via their hash code.
      severity:
        type: string
        description: Severity level of the alert
        enum:
          - alert
          - warning
          - info
      text:
        type: string
        description: Longer description of the alert
      url:
        type: string
        description: URL with more information about the disruption
      remoteIcon:
        description: Part of icon file name that can be fetched from server.
        type: string
      location:
        $ref: '#/definitions/Location'
    required:
      - title
      - hashCode
      - severity

  RealTimeVehicle:
    description:
      Location information of a vehicle based on real-time data
    properties:
      id:
        type: string
        description: Internal identifier
      lastUpdate:
        type: integer
        description: Time the vehicle was at the reported position
      location:
        type: object
        properties:
          lat:
            type: number
            description: Latitude
          lng:
            type: number
            description: Longitude
          bearing:
            type: integer
            description: Angle of travel the vehicle was last travelling in. As true bearing. See http://en.wikipedia.org/wiki/Haversine_formula or http://www.movable-type.co.uk/scripts/latlong.html.
            # minValue: 0
            # maxValue: 359
            # multipleOf: 1
        required:
          - lat
          - lng
      occupancy:
        type: string
        description: How full the service is. See https://developers.google.com/transit/gtfs-realtime/gtfs-realtime-proto.
        enum:
          - EMPTY
          - MANY_SEATS_AVAILABLE
          - FEW_SEATS_AVAILABLE
          - STANDING_ROOM_ONLY
          - CRUSHED_STANDING_ROOM_ONLY
          - FULL
          - NOT_ACCEPTING_PASSENGERS
      wifi:
        type: boolean
        description: Whether the vehicle has Wi-Fi service onboard.
    required:
      - id
      - lastUpdate
      - location

  Region:
    properties:
      name:
        type: string
        description: Internal identifier for the region
      cities:
        type: array
        description: List of bigger cities covered by this region. Note that this can be empty.
        minItems: 0
        items:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number
            title:
              type: string
            timezone:
              type: string
          required:
            - lat
            - lng
            - title
            - timezone

      polygon:
        type: string
        description:
          Encoded polygon of coverage area for the region, using
          Google's Encoded Polyline Algorithm. See
          https://developers.google.com/maps/documentation/utilities/polylinealgorithm.
      modes:
        type: array
        description:
          List of mode identifiers that are available in this region (but not necessarily everywhere in that region).
          Look at `modes` array in `regions.json` to get more details on each mode. These are also the modes that can be
           used as input to any routing endpoint. See
           http://skedgo.github.io/tripgo-api/site/advanced/#mode-identifiers.
        items:
          type: string
      urls:
        type: array
        description: Array of base URLs of SkedGo servers which cover this region.
        items:
          type: string
    required:
      - name
      - polygon
      - cities
      - modes
      - urls
    example:
      name: DE_BV_Nuremberg
      polygon: SDf9723rhkjFKHAFB
      cities:
        - title: Nuremberg
          lat: 1.1
          lng: 14.2
          timezone: Europe/Berlin
        - title: Erlangen
          lat: 1.2
          lng: 15.2
          timezone: Europe/Berlin
      modes:
        - pt_pub
        - me_car
        - me_mot
        - cy_bic
        - cy_bic-s_NORIS
        - wa_wal
      urls:
        - nuremberg-bv-de.hadron.buzzhives.com

  RegionDetail:
    properties:
      code:
        type: string
        description: Internal identifier for the region
      streetBicyclePaths:
        type: boolean
        description: Whether the TripGo API has bike path data for this region.
      streetWheelchairAccessibility:
        type: boolean
        description: Whether the TripGo API has information on wheelchair-friendliness of footpaths.
      transitBicycleAccessibility:
        type: boolean
        description: Whether the TripGo API has information on whether you can take bicycles on public transport or not.
      transitConcessionPricing:
        type: boolean
        description: Whether the TripGo API supports concession/student pricing for public transport for this region.
      transitModes:
        type: array
        items:
          $ref: '#/definitions/ModeInfo'
      transitWheelchairAccessibility:
        type: boolean
        description: Whether the TripGo API includes wheelchair accessibility information for public transport for this region.
      operators:
        type: array
        items:
          title: OperatorInformation
          type: object
          properties:
            name:
              type: string
            numberOfServices:
              type: integer
            realTimeStatus:
              type: string
              enum:
                - IS_REAL_TIME
                - INCAPABLE
            types:
              type: array
              items:
                $ref: '#/definitions/ModeInfo'
          required:
            - name
            - numberOfServices
            - realTimeStatus
            - types

    required:
      - code
      - streetBicyclePaths
      - streetWheelchairAccessibility
      - transitBicycleAccessibility
      - transitConcessionPricing
      - transitModes
      - transitWheelchairAccessibility
      - operators
    example:
      code: DE_HH_Hamburg
      streetBicyclePaths: true
      streetWheelchairAccessibility: false
      transitBicycleAccessibility: false
      transitConcessionPricing: false
      transitWheelchairAccessibility: true
      transitModes:
        - identifier: pt_pub_ferry
          alt: ferry
          localIcon: ferry
          remoteIcon: ferry-germany-hamburg
          color:
            red: 0
            blue: 211
            green: 157
      operators:
        - name: HVV
          numberOfServices: 65123
          realTimeStatus: INCAPABLE
          types:
            - identifier: pt_pub_train
              alt: train
              localIcon: train

  Service:
    description: Details of public transport service
    properties:
      operator:
        type: string
      serviceTripID:
        type: string
        description: Internal identifier of the service. Related to `trip_id` in GTFS.
      serviceName:
        type: string
        description: Long name of the service. Related to `route_long_name` in GTFS.
      serviceNumber:
        type: string
        description: Short name of the service. Related to `route_short_name` in GTFS.
      serviceDirection:
        type: string
        description: Head sign of the service, indicating its direction. Related to `head_sign` in GTFS.
      serviceColor:
        $ref: '#/definitions/Color'
      bicycleAccessible:
        description: Can you take a bicycle on this service? Missing when unknown.
        type: boolean
      wheelchairAccessible:
        type: boolean
        description: |
          If this service is wheelchair accessible or not. If this field is missing, this does not mean that it is not accessible, but rather that it is unknown whether it is accessible. Only if the value is present and is `false`, does it mean that the service is not wheelchair accessible.
    required:
      - operator
      - serviceTripID
    example:
      - operator: Sydney Buses
        serviceDirection: CITY Circular Quay
        serviceName: Maroubra Beach - Circular Quay
        serviceNumber: "377"
        serviceTripID: "142496466_20160307_11954"


  ServiceDeparture:
    description: Details of a service departing at a particular time
    allOf:
    - $ref: '#/definitions/Service'
    - type: object
      properties:
        startTime:
          type: integer
          description: Departure of the service  as per timetable in seconds since 1970.
        modeInfo:
          $ref: '#/definitions/ModeInfo'
        realTimeStatus:
          type: string
          description: Indicator for whether real-time information is available for this service. Note that even if this says the service is real-time, this does not mean the `startTime` is real-time.
          enum:
            - IS_REAL_TIME
            - CAPABLE
            - INCAPABLE
        realtimeVehicle:
          # description: The vehicle for this specific service.
          $ref: '#/definitions/RealTimeVehicle'
        realtimeAlternativeVehicle:
          description: Alternative vehicles for the same route, but not necessarily, this specific service.
          type: array
          items:
            $ref: '#/definitions/RealTimeVehicle'
        alerts:
          description: Service alerts / disruption information that affect this service.
          type: array
          items:
            $ref: '#/definitions/RealTimeAlert'
        bicycleAccessible:
          description: Can you take a bicycle on this service? Missing when unknown.
          type: boolean
        wheelchairAccessible:
          description: Is this service wheelchair accessible? Missing when unknown.
          type: boolean
      required:
        - startTime
        - modeInfo
      example:
        - startTime: 1458708255
          modeInfo:
            alt: bus
            identifier: pt_pub_bus
            localIcon: bus
          operator: Sydney Buses
          realTimeStatus: CAPABLE
          serviceDirection: CITY Circular Quay
          serviceName: Maroubra Beach - Circular Quay
          serviceNumber: "377"
          serviceTripID: "142496466_20160307_11954"
          bicycleAccessible: false
          wheelchairAccessible: true

  ServiceShape:
    description:
      Details of the specific route that a service takes.
    allOf:
    - $ref: '#/definitions/Service'
    - type: object
      properties:
        encodedWaypoints:
          type: string
          description: |
            Encoded polyline of route that this service is taking. Encoded using
              Google's Encoded Polyline Algorithm. See
              https://developers.google.com/maps/documentation/utilities/polylinealgorithm.

        travelled:
          type: boolean
          description: |
            Whether this shape is travelled for the provided input. A transit segment of a trip can include shapes which are not travelled, to indicate where the service was coming from before the embarkation stop and where it's going to after the disembarkation stop.
        stops:
          type: array
          items:
            type: object
            properties:
              lat:
                type: number
              lng:
                type: number
              code:
                type: string
                description: The stop's code (matches GTFS `stopCode`)
              name:
                type: string
                description: Name of the stop (might include platform)
              shortName:
                type: string
                description: Platform information of the stop. Might double-up with `name`.
              bearing:
                type: integer
                description: Angle of travel from this stop to the next. As true bearing. See http://en.wikipedia.org/wiki/Haversine_formula or http://www.movable-type.co.uk/scripts/latlong.html.
              arrival:
                type: integer
                description: Arrival time at this stop in seconds since 1970.
              departure:
                type: integer
                description: Departure time from this stop in seconds since 1970.
            required:
              - lat
              - lng
              - code
            example:
              - bearing: 78
                code: "21105-6"
                departure: 1462331280
                lat: 59.44123
                lng: 24.7403
                name: "Balti jaam 6"
              - arrival: 1462331520
                bearing: 152
                code: "10503-1"
                departure: 1462331520
                lat: 59.44349
                lng: 24.75014
                name: "Linnahall"
      required:
        - encodedWaypoints
        - travelled

  SegmentReference:
    description:
      Segment information that's specific to a trip. The bulk of the information is in the segment template of the hash code that the segment reference is referencing.
    properties:
      segmentTemplateHashCode:
        type: integer
        description: Hash code of the referenced SegmentTemplate
      startTime:
        type: integer
        description: Seconds since 1970. Reflects real-time data if `realTime == true`.
      endTime:
        type: integer
        description: Seconds since 1970. Reflects real-time data if `realTime == true`
      realTime:
        type: boolean
        description: Present and set to `true` if `startTime` and `endTime` reflect real-time data.
      booking:
        $ref: '#/definitions/BookingInfo'
      serviceTripID:
        type: string
        description: For transit segments (required). Matches GTFS `trip_id`.
      timetableStartTime:
        type: integer
        description: For transit segments (optional). Seconds since 1970 according to the timetable, if there's real-time data available.
      stops:
        type: integer
        description: For transit segments (optional). Number of stops you need to stay on this segment. Includes embarkation and disembarkation stops.
      platform:
        type: string
        description: For transit segments (optional). Title for embarkation platform.
      serviceNumber:
        type: string
        description: For transit segments (optional). Typically GTFS `route_short_name`.
      serviceName:
        type: string
        description: For transit segments (optional). Typically GTFS `route_long_name`.
      serviceDirection:
        type: string
        description: For transit segments (optional). Typically GTFS `trip_headsign`.
      serviceColor:
        $ref: '#/definitions/Color'
      frequency:
        type: integer
        description: For transit segments (optional). Frequency of service in minutes if it's not running by a timetable.
      ticketWebsiteURL:
        type: string
        description: For transit segments (optional). URL for travellers do get additional information about tickets.
      bicycleAccessible:
        description: Can you take a bicycle on this service? Missing when unknown.
        type: boolean
      wheelchairAccessible:
        type: boolean
        description: |
          For transit segments (optional). If this segment is wheelchair accessible or not. If this field is missing, this does not mean that it is not accessible, but rather that it is unknown whether it is accessible. Only if the value is present and is `false`, does it mean that the segment is not wheelchair accessible.
      isCancelled:
        type: boolean
        description: For transit segments (optional). If service has been cancelled according to real-time data.
      realtimeVehicle:
        $ref: '#/definitions/RealTimeVehicle'
      realtimeVehicleAlternatives:
        type: array
        items:
          $ref: '#/definitions/RealTimeVehicle'
      alertHashCodes:
        type: array
        items:
          description: Hash code of alert; get details from separate alerts dictionary
          type: integer
      nearbyCarParks:
        type: array
        items:
          $ref: '#/definitions/CarParkLocation'

    required:
      - segmentTemplateHashCode
      - startTime
      - endTime
    example:
      - startTime: 1454996190
        endTime: 1454996616
        segmentTemplateHashCode: 1963282048
        serviceTripID: 605F.1433.101.60-20160306.T.8.40873943
        stops: 3
        platform: Platform 1
        serviceNumber: T4
        serviceName: T4 Eastern Suburbs & Illawarra Line
        serviceDirection: Hurstville
        bicycleAccesible: true
        wheelchairAccessible: true

  SegmentTemplate:
    allOf:
    - $ref: '#/definitions/SegmentTemplateMovingTransit'
    - $ref: '#/definitions/SegmentTemplateMovingNonTransit'
    - $ref: '#/definitions/SegmentTemplateStationary'

  BaseSegmentTemplate:
    description:
      Templates for segments that are typically shared by various trips.<br/>
      <br/>
      The available fields heavily depend on the type of the segment. E.g., stationary segments have `location`, while others have both `from` and `to`.<br/>
      <br/>
      Many of the strings fields have placeholder, such as `<PLATFORM>` that should be filled in with information from the reference. [See documentation](http://skedgo.github.io/tripgo-api/site/advanced/#placeholders-in-segment-templates) on those templates.
    properties:
      hashCode:
        type: integer
        description: Hash code by which this template will get referenced
      modeInfo:
        $ref: '#/definitions/ModeInfo'
      modeIdentifier:
        type: string
        description:
          Mode identifier. Will match input, e.g., `routing.json`'s `modes`. See
          http://skedgo.github.io/tripgo-api/site/advanced/#mode-identifiers.
      action:
        type: string
        description: Localised single-line instruction for this segment. Can include placeholders.
      notes:
        type: string
        description: Localised multi-line notes, separated by `\n`. Can include placeholders.
      terms:
        type: string
        description: Localised terms provided by transport service provider.
      visibility:
        type: string
        enum:
          - "in summary"
          - "on map"
          - "in details"
        description: Indication where segment should be displayed.
      type:
        type: string
        enum:
         - "stationary"
         - "unscheduled"
         - "scheduled"
        description: Information what kind of segment this is
      sources:
        type: array
        items:
          $ref: '#/definitions/DataSourceAttribution'

    required:
      - hashCode
      - action
      - visibility
      - type

  BaseSegmentTemplateAnyMoving:
    allOf:
    - $ref: '#/definitions/BaseSegmentTemplate'
    - type: object
      properties:
        from:
          $ref: '#/definitions/Location'
        to:
          $ref: '#/definitions/Location'
        travelDirection:
          type: integer
          description: Angle of travel at the beginning of the segment. As true bearing. See http://en.wikipedia.org/wiki/Haversine_formula or http://www.movable-type.co.uk/scripts/latlong.html.
          # minValue: 0
          # maxValue: 359
          # multipleOf: 1

  SegmentTemplateMovingTransit:
    allOf:
    - $ref: '#/definitions/BaseSegmentTemplateAnyMoving'
    - type: object
      properties:
        serviceOperator:
          type: string
        disclaimer:
          type: string
          description: |
            Official disclaimer for this segment, which should be displayed with the trip.
        stopCode:
          type: string
          description: Start stop code
        endStopCode:
          type: string
          description: End stop code
        isContinuation:
          type: boolean
          description: |
            Indication whether this segment is a continuation of a previous segment. This
            would mean that the user can stay on the service from the previous segment,
            and that the service is changing its official name and identifiers.
        shapes:
          type: array
          items:
            $ref: '#/definitions/ServiceShape'
        smsNumber:
          type: string
          description: SMS number which provides real-time information
        smsMessage:
          type: string
          description: Message to send to `smsNumber` to get real-time information
      required:
        - serviceOperator

  SegmentTemplateMovingNonTransit:
    allOf:
    - $ref: '#/definitions/BaseSegmentTemplateAnyMoving'
    - type: object
      properties:
        durationWithoutTraffic:
          type: integer
          description: Duration in seconds that this trip should take if there was no traffic
        metres:
          type: integer
          description: Total travel distance in metres
        metresSafe:
          type: integer
          description: Total travel distance that is considered safe for this mode (see description of 'safe' in the 'streets' array)
        streets:
          type: array
          items:
            type: object
            properties:
              encodedPolyline:
                type: string
                description: |
                  Encoded polyline of route that this service is taking. Encoded using
                    Google's Encoded Polyline Algorithm. See
                    https://developers.google.com/maps/documentation/utilities/polylinealgorithm.
              safe:
                type: boolean
                description: Indicator for cycle paths if they are cycling-friendly (e.g., there's a bike lane) or for walking paths if they are wheelchair-friendly. Missing if unknown.
            required:
              - encodedPolyline

  SegmentTemplateStationary:
    allOf:
    - $ref: '#/definitions/BaseSegmentTemplate'
    - type: object
      properties:
        location:
          $ref: '#/definitions/Location'
        cost:
          type: number
          description: Cost of this segment in local currency
        isParking:
          type: boolean
          description: If this segment is for parking a private vehicle
        hasCarParks:
          type: boolean
          description: If car park information is available for this segment

  Trip:
    properties:
      depart:
        type: integer
        description: Seconds since 1970
      arrive:
        type: integer
        description: Seconds since 1970
      segments:
        type: array
        items:
          $ref: '#/definitions/SegmentReference'
      mainSegmentHashCode:
        type: integer
        description:
          Hash code for the primary segment of this trip, which can
          be used for giving the trip a name, e.g., "Bus trip".
      caloriesCost:
        type: number
        description: Total active calories used up for the full trip
      carbonCost:
        type: number
        description: Total kg CO2 used up for the full trip
      hassleCost:
        type: number
        description:
          An imaginary dollar-equivalent quantifying the
          inconvenience of the full trip. Should only be used for
          sorting and not shown to the user.
      moneyCost:
        type: number
        description:
          If the trip has no `moneyCost` it does **not** mean that
          it's free, but rather that the price is unknown. It is
          still possible that the price for some segments is known,
          in which case that information is attached to the segments.
      moneyCostUSD:
        type: number
        description:
          Same as `moneyCost` but converted to USD using latest
          exchange rate. Useful for comparing trips which us different
          currencies.
      currencySymbol:
        type: string
        description: The currency symbol for the `moneyCost` value
      weightedScore:
        type: number
        description:
          An imaginary dollar-equivalent representing the total score
          for the trip, considering the user's preferences. Should
          only be used for sorting and not shown to the user.
      temporaryURL:
        type: string
        description: The full `/trip/{id}` URL for this trip
      saveURL:
        type: string
        description: The full `/trip/{id}/save` URL for this trip
      shareURL:
        type: string
        description: The persistent URL for this trip
      updateURL:
        type: string
        description: The full `/trip/{id}/update` URL for this trip
      plannedURL:
        type: string
        description: The full `/trip/{id}/planned` URL for this trip
    required:
      - depart
      - arrive
      - segments
      - mainSegmentHashCode
      - weightedScore
      - hassleCost
      - carbonCost
      - caloriesCost

  TripGroup:
    properties:
      frequency:
        type: integer
      trips:
        type: array
        items:
          $ref: '#/definitions/Trip'
    required:
      - trips

  TTPSolution:
    properties:
      id:
        type: string
      hashCode:
        type: integer
      items:
        type: array
        items:
          type: object
          properties:
            locationId:
              type: string
            tripOptions:
              type: array
              items:
                $ref: "#/definitions/TripOption"
    required:
      - id
      - hashCode
      - items

  TripOption:
    properties:
      duration:
        $ref: '#/definitions/TripOptionValue'
      price:
        $ref: '#/definitions/TripOptionValue'
      score:
        $ref: '#/definitions/TripOptionValue'
      earliestDeparture:
        type: integer
      latestDeparture:
        type: integer
      modes:
        type: array
        items:
          type: string
          format: mode-identifier
          description: As defined by regions.json
    required:
      - duration
      - score
      - modes

  TripOptionValue:
    properties:
      average:
        type: number
      min:
        type: number
      max:
        type: number
      unit:
        type: string
    required:
      - average
      - unit

  InputError:
    properties:
      missing:
        type: array
        items:
          type: string
      invalid:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            reason:
              type: string

  AlertsInfo:
    properties:
      alert:
        $ref: "#/definitions/RealTimeAlert"
      operators:
        type: array
        items:
          type: string
      stopCodes:
        type: array
        items:
          type: string
      routeIDs:
        type: array
        items:
          type: string
      serviceTripIDs:
        type: array
        items:
          type: string
    required:
      - alert
  BookingsCountResponse:
    properties:
      count:
        type: number

  BookingsResponse:
    properties:
      bookings:
        $ref: '#/definitions/ConfirmedBookingData'
      count:
        type: number

  ConfirmedBookingData:
    properties:
      confirmation:
        $ref: '#/definitions/LocalizedBookingConfirmationInfo'
      trips:
        type: array
        items:
          type: string
      mode:
        type: string
      time:
        type: number
      index:
        type: number

  LocalizedBookingConfirmationInfo:
    properties:
      provider:
        $ref: '#/definitions/Detail'
      vehicle:
        $ref: '#/definitions/Detail'
      status:
        $ref: '#/definitions/Detail'
      purchase:
        $ref: '#/definitions/Purchase'
      actions:
        type: array
        items:
          $ref: '#/definitions/Action'

  Detail:
    properties:
      title:
        type: string
      subtitle:
        type: string
      imageURL:
        type: string
      value:
        type: string

  Purchase:
    properties:
      price:
        type: number
      currency:
        type: string
      productName:
        type: string
      productType:
        type: string
      id:
        type: string
      validFrom:
        type: number
#        description: in seconds since 1970
      timezone:
        type: string
#        desription: timezone ID for validFrom
      validFor:
        type: number
#        description: duration in seconds
      valid:
        type: boolean
      brand:
        $ref: '#/definitions/CompanyInfo'
      source:
        $ref: '#/definitions/DataSourceAttribution'

  Action:
    properties:
      title:
        type: string
      type:
        enum:
          - CANCEL
          - RATE
          - CALL
          - QRCODE
          - PAY
      internalURL:
        type: string
      externalURL:
        type: string
      isDestructive:
        type: boolean

  AuthData:
    properties:
      action:
        description: "available action (signin / logout)"
        type: string
      provider:
        description: "Provider code (like, 'uber', 'lyft', etc)"
        type: string
      status:
        description: "Status of the user (Account not yet connected / Account connected)"
        type: string
      actionTitle:
        description: "Action text (Setup / Connect)"
        type: string
      url:
        description: "endpoint to start the action"
        type: string
      modeIdentifier:
        type: string
      companyInfo:
        $ref: '#/definitions/CompanyInfo'

  BookingAction:
    type: object
    properties:
      URL:
        description: 'the url to post to, after the user hits on the action button'
        type: string
      enabled:
        description: 'when present, indicates whether the action button should be enabled to be clicked by the user or not'
        type: boolean
      finalStep:
        description: Indicates whether going to the next step will actually do the booking
        type: boolean
      hudText:
        description: "indicates what's the server going to do after the action fired."
        type: string
      title:
        description: the title or text to show in the button
        type: string
    description: >-
      This class contains information about the main action button to shown on
      screen:

  BookingForm:
    properties:
      action:
        $ref: '#/definitions/BookingAction'
      prevAction:
        $ref: '#/definitions/BookingAction'
      form:
        description: The list of FormGroups to show in the form.
        type: array
        items:
          $ref: '#/definitions/FormGroup'
      image:
        description: 'a URL of an image to show, whenever available'
        type: string
      value:
        description: ''
        type: string
      id:
        description: the id to identify the field
        type: string
      title:
        description: the title to show to the user (may be null missing)
        type: string
    description: >-
      Generic data to generate input fields on booking screen.  <br>

      The data will be grouped in FormGroup objects, each will include a list of
      FormFields. <br>

      This will also have an 'action' field, which is related to the main action
      to show in the screen. <br>

      see <a href='./bookingAction.html'>BookingAction</a> <br>

  PaymentForm:
    allOf:
      - $ref: '#/definitions/BookingForm'
      - type: object
    description: Generic data to generate input fields on a payment booking screen

  AuthForm:
    allOf:
      - $ref: '#/definitions/BookingForm'
      - type: object
    description: Generic data to generate input fields on an auth booking screen

  BookingFormField:
    allOf:
      - $ref: '#/definitions/FormField'
      - type: object
      - properties:
          action:
            $ref: '#/definitions/BookingAction'
          prevAction:
            $ref: '#/definitions/BookingAction'
          form:
            description: The list of FormGroups to show in the form, not described properly on purpose to avoid infinite loop
            type: array
            items:
              type: object
          image:
            description: 'a URL of an image to show, whenever available'
            type: string
          value:
            description: ''
            type: string
    description: >-
      Generic data to generate input fields on booking screen.  <br>

      The data will be grouped in FormGroup objects, each will include a list of
      FormFields. <br>

      This will also have an 'action' field, which is related to the main action
      to show in the screen. <br>

      see <a href='./bookingAction.html'>BookingAction</a> <br>

  BookingFormData:
    type: object
    properties:
      input:
        description: ''
        type: array
        items:
          $ref: '#/definitions/FormField'
    description: ''

  FormField:
    type: object
    discriminator: type
    properties:
      id:
        description: the id to identify the field
        type: string
      hidden:
        description: 'determines whether this field needs to be hidden to the user (and in that case, must be sent to the server)'
        type: boolean
      readOnly:
        description: determines whether this field is only to show information to the user and does not need to be sent to the server
        type: boolean
      required:
        description: determines whether this field must be sent back to the server or not
        type: boolean
      sidetitle:
        description: 'a sidetitle to show aligned to the right, at the same level of the title (may be missing)'
        type: string
      subtitle:
        description: the subtitle to show under the title (may be missing)
        type: string
      title:
        description: the title to show to the user (may be null missing)
        type: string
      value:
        type: object
      type:
        type: string
        description: 'this type field will determine the fields that will be available : string, address, datetime, stepper, time, password, link, bookingForm, authForm, paymentForm, text, switch, external, option'
    required:
      - id
      - value
      - type
    description: |-
      Form field is an abstract class that represents a generif field. <br>
      Current possible instances include: <br>
      <a href='./addressFormField.html'>AddressFormField</a> <br>
      <a href='./dateTimeFormField.html'>DateTimeFormField</a> <br>
      <a href='./stepperFormField.html'>StepperFormField</a> <br>
      <a href='./stringFormField.html'>StringFormField</a> <br>
      <a href='./timeFormField.html'>TimeFormField</a> <br>
      <a href='./passwordFormField.html'>PasswordFormField</a> <br>
      <a href='./linkFormField.html'>LinkFormField</a> <br>
      <a href='./bookingForm.html'>BookingForm</a> <br>
      <a href='./statusForm.html'>StatusForm</a> <br>
      <a href='./paymentForm.html'>PaymentForm</a> <br>
      <a href='./textFormField.html'>TextFormField</a> <br>
      <a href='./switchFormField.html'>SwitchFormField</a> <br>
      <a href='./optionFormField.html'>OptionFormField</a> <br>

  StringFormField:
    allOf:
      - $ref: '#/definitions/FormField'
      - type: object
      - properties:
          value:
            description: 'value of the field, to be shown and filled/updated by the user, and sent to the backend if required'
            type: string
          placeHolder:
            description: 'a string to show as place holder when the value is empty'
            type: string
          keyboardType:
            description: 'the type of keyboard that would be good to show to the user'
            type: string
            enum:
              - TEXT
              - EMAIL
              - PHONE
              - NUMBER

  AddressFormField:
    allOf:
      - $ref: '#/definitions/FormField'
      - type: object
      - properties:
          value:
            description: 'value of the field, to be shown and filled/updated by the user, and sent to the backend if required'
            $ref: '#/definitions/Location'

  DateTimeFormField:
    allOf:
      - $ref: '#/definitions/FormField'
      - type: object
      - properties:
          value:
            description: 'value of the field, to be shown and filled/updated by the user, and sent to the backend if required'
            type: integer
          timezone:
            type: string

  StepperFormField:
    allOf:
      - $ref: '#/definitions/FormField'
      - type: object
      - properties:
          value:
            description: 'value of the field, to be shown and filled/updated by the user, and sent to the backend if required'
            type: integer
          minValue:
            description: 'minimum value allowed'
            type: integer
          maxValue:
            description: 'maximum value allowed'
            type: integer

  TimeFormField:
    allOf:
      - $ref: '#/definitions/FormField'
      - type: object
      - properties:
          value:
            description: 'value of the field, to be shown and filled/updated by the user, and sent to the backend if required'
            type: integer

  PasswordFormField:
    allOf:
      - $ref: '#/definitions/FormField'
      - type: object
      - properties:
          value:
            description: 'value of the field, to be shown and filled/updated by the user, and sent to the backend if required'
            type: string

  LinkFormField:
    allOf:
      - $ref: '#/definitions/FormField'
      - type: object
      - properties:
          value:
            description: 'url'
            type: string
          method:
            type: string
            enum:
              - refresh
              - get
              - post
              - external

  TextFormField:
    allOf:
      - $ref: '#/definitions/FormField'
      - type: object
      - properties:
          value:
            description: 'value of the field, to be shown and filled/updated by the user'
            type: string

  SwitchFormField:
    allOf:
      - $ref: '#/definitions/FormField'
      - type: object
      - properties:
          value:
            description: 'boolean value of the field, to be shown and filled/updated by the user, and sent to the backend if required'
            type: boolean

  OptionFormField:
    allOf:
      - $ref: '#/definitions/FormField'
      - type: object
      - properties:
          value:
            description: 'value of the field, to be shown and filled/updated by the user, and sent to the backend if required'
            $ref: '#/definitions/OptionData'
          allValues:
            description: 'list of available values to show to the user'
            items:
              $ref: '#/definitions/OptionData'

  OptionData:
    properties:
      sidetitle:
        description: 'a sidetitle to show aligned to the right, at the same level of the title (may be missing)'
        type: string
      subtitle:
        description: the subtitle to show under the title (may be missing)
        type: string
      title:
        description: the title to show to the user (may be null missing)
        type: string
      value:
        description: value of the option
        type: string

  ExternalFormField:
    allOf:
      - $ref: '#/definitions/FormField'
      - type: object
      - properties:
          value:
            description: 'url to open in the external window/view'
            type: boolean
          disregardURL:
            description: 'a url (or the start of it) that, when detected, will determine that the external window/view needs to be closed to re-gain control within the app'
            type: string
          nextURL:
            description: 'next action url after the disregardURL is encountered, to get a new booking form with the next step'
            type: string
          nextHudText:
            description: 'message to be shown while the next url is being loaded'
            type: string

  FormGroup:
    properties:
      fields:
        description: ''
        type: array
        items:
          $ref: '#/definitions/FormField'
      footer:
        description: ''
        type: string
      title:
        description: ''
        type: string
    description: ''

  PaymentToken:
    properties:
      token:
        type: string

  PaymentData:
    type: object
    properties:
      nonce:
        type: string

  LocalizedQuickBookingInfo:
    properties:
      bookingUrl:
        type: string
      tripUpdateURL:
        type: string
      allQuotesURL:
        description: shared by all quotes
        type: string
      requestURL:
        type: string
      localizedTitle:
        type: string
      localizedSubtitle:
        type: string
      localizedBookingTitle:
        type: string
      localizedPriceString:
        type: string
      localPrice:
        type: number
      USDPrice:
        type: number
      secondaryBookingTitle:
        type: string
      secondaryBookingURL:
        type: string
      surgeString:
        type: string
      surgeImageURL:
        type: string
      ETAInSeconds:
        type: integer
      imageURL:
        type: string
      productID:
        type: string
      index:
        type: integer
      count:
        type: integer

  ErrorMessage:
    properties:
      usererror:
        type: boolean
      error:
        type: string
      errorCode:
        type: integer
